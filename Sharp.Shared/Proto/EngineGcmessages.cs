// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: engine_gcmessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from engine_gcmessages.proto</summary>
public static partial class EngineGcmessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for engine_gcmessages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EngineGcmessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdlbmdpbmVfZ2NtZXNzYWdlcy5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2Rl",
          "c2NyaXB0b3IucHJvdG8i3QEKFUNFbmdpbmVHb3R2U3luY1BhY2tldBIQCght",
          "YXRjaF9pZBgBIAEoBBITCgtpbnN0YW5jZV9pZBgCIAEoDRIWCg5zaWdudXBm",
          "cmFnbWVudBgDIAEoDRIXCg9jdXJyZW50ZnJhZ21lbnQYBCABKA0SEAoIdGlj",
          "a3JhdGUYBSABKAISDAoEdGljaxgGIAEoDRIPCgdydGRlbGF5GAggASgCEg4K",
          "BnJjdmFnZRgJIAEoAhIZChFrZXlmcmFtZV9pbnRlcnZhbBgKIAEoAhIQCghj",
          "ZG5kZWxheRgLIAEoDQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CEngineGotvSyncPacket), global::CEngineGotvSyncPacket.Parser, new[]{ "MatchId", "InstanceId", "Signupfragment", "Currentfragment", "Tickrate", "Tick", "Rtdelay", "Rcvage", "KeyframeInterval", "Cdndelay" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CEngineGotvSyncPacket : pb::IMessage<CEngineGotvSyncPacket>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CEngineGotvSyncPacket> _parser = new pb::MessageParser<CEngineGotvSyncPacket>(() => new CEngineGotvSyncPacket());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CEngineGotvSyncPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EngineGcmessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CEngineGotvSyncPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CEngineGotvSyncPacket(CEngineGotvSyncPacket other) : this() {
    _hasBits0 = other._hasBits0;
    matchId_ = other.matchId_;
    instanceId_ = other.instanceId_;
    signupfragment_ = other.signupfragment_;
    currentfragment_ = other.currentfragment_;
    tickrate_ = other.tickrate_;
    tick_ = other.tick_;
    rtdelay_ = other.rtdelay_;
    rcvage_ = other.rcvage_;
    keyframeInterval_ = other.keyframeInterval_;
    cdndelay_ = other.cdndelay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CEngineGotvSyncPacket Clone() {
    return new CEngineGotvSyncPacket(this);
  }

  /// <summary>Field number for the "match_id" field.</summary>
  public const int MatchIdFieldNumber = 1;
  private readonly static ulong MatchIdDefaultValue = 0UL;

  private ulong matchId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong MatchId {
    get { if ((_hasBits0 & 1) != 0) { return matchId_; } else { return MatchIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      matchId_ = value;
    }
  }
  /// <summary>Gets whether the "match_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMatchId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "match_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMatchId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "instance_id" field.</summary>
  public const int InstanceIdFieldNumber = 2;
  private readonly static uint InstanceIdDefaultValue = 0;

  private uint instanceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint InstanceId {
    get { if ((_hasBits0 & 2) != 0) { return instanceId_; } else { return InstanceIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      instanceId_ = value;
    }
  }
  /// <summary>Gets whether the "instance_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInstanceId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "instance_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInstanceId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "signupfragment" field.</summary>
  public const int SignupfragmentFieldNumber = 3;
  private readonly static uint SignupfragmentDefaultValue = 0;

  private uint signupfragment_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Signupfragment {
    get { if ((_hasBits0 & 4) != 0) { return signupfragment_; } else { return SignupfragmentDefaultValue; } }
    set {
      _hasBits0 |= 4;
      signupfragment_ = value;
    }
  }
  /// <summary>Gets whether the "signupfragment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSignupfragment {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "signupfragment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSignupfragment() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "currentfragment" field.</summary>
  public const int CurrentfragmentFieldNumber = 4;
  private readonly static uint CurrentfragmentDefaultValue = 0;

  private uint currentfragment_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Currentfragment {
    get { if ((_hasBits0 & 8) != 0) { return currentfragment_; } else { return CurrentfragmentDefaultValue; } }
    set {
      _hasBits0 |= 8;
      currentfragment_ = value;
    }
  }
  /// <summary>Gets whether the "currentfragment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrentfragment {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "currentfragment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrentfragment() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "tickrate" field.</summary>
  public const int TickrateFieldNumber = 5;
  private readonly static float TickrateDefaultValue = 0F;

  private float tickrate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Tickrate {
    get { if ((_hasBits0 & 16) != 0) { return tickrate_; } else { return TickrateDefaultValue; } }
    set {
      _hasBits0 |= 16;
      tickrate_ = value;
    }
  }
  /// <summary>Gets whether the "tickrate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTickrate {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "tickrate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTickrate() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "tick" field.</summary>
  public const int TickFieldNumber = 6;
  private readonly static uint TickDefaultValue = 0;

  private uint tick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Tick {
    get { if ((_hasBits0 & 32) != 0) { return tick_; } else { return TickDefaultValue; } }
    set {
      _hasBits0 |= 32;
      tick_ = value;
    }
  }
  /// <summary>Gets whether the "tick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTick {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "tick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTick() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "rtdelay" field.</summary>
  public const int RtdelayFieldNumber = 8;
  private readonly static float RtdelayDefaultValue = 0F;

  private float rtdelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Rtdelay {
    get { if ((_hasBits0 & 64) != 0) { return rtdelay_; } else { return RtdelayDefaultValue; } }
    set {
      _hasBits0 |= 64;
      rtdelay_ = value;
    }
  }
  /// <summary>Gets whether the "rtdelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRtdelay {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "rtdelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRtdelay() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "rcvage" field.</summary>
  public const int RcvageFieldNumber = 9;
  private readonly static float RcvageDefaultValue = 0F;

  private float rcvage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Rcvage {
    get { if ((_hasBits0 & 128) != 0) { return rcvage_; } else { return RcvageDefaultValue; } }
    set {
      _hasBits0 |= 128;
      rcvage_ = value;
    }
  }
  /// <summary>Gets whether the "rcvage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRcvage {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "rcvage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRcvage() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "keyframe_interval" field.</summary>
  public const int KeyframeIntervalFieldNumber = 10;
  private readonly static float KeyframeIntervalDefaultValue = 0F;

  private float keyframeInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float KeyframeInterval {
    get { if ((_hasBits0 & 256) != 0) { return keyframeInterval_; } else { return KeyframeIntervalDefaultValue; } }
    set {
      _hasBits0 |= 256;
      keyframeInterval_ = value;
    }
  }
  /// <summary>Gets whether the "keyframe_interval" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKeyframeInterval {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "keyframe_interval" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKeyframeInterval() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "cdndelay" field.</summary>
  public const int CdndelayFieldNumber = 11;
  private readonly static uint CdndelayDefaultValue = 0;

  private uint cdndelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Cdndelay {
    get { if ((_hasBits0 & 512) != 0) { return cdndelay_; } else { return CdndelayDefaultValue; } }
    set {
      _hasBits0 |= 512;
      cdndelay_ = value;
    }
  }
  /// <summary>Gets whether the "cdndelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCdndelay {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "cdndelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCdndelay() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CEngineGotvSyncPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CEngineGotvSyncPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MatchId != other.MatchId) return false;
    if (InstanceId != other.InstanceId) return false;
    if (Signupfragment != other.Signupfragment) return false;
    if (Currentfragment != other.Currentfragment) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tickrate, other.Tickrate)) return false;
    if (Tick != other.Tick) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rtdelay, other.Rtdelay)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rcvage, other.Rcvage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KeyframeInterval, other.KeyframeInterval)) return false;
    if (Cdndelay != other.Cdndelay) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMatchId) hash ^= MatchId.GetHashCode();
    if (HasInstanceId) hash ^= InstanceId.GetHashCode();
    if (HasSignupfragment) hash ^= Signupfragment.GetHashCode();
    if (HasCurrentfragment) hash ^= Currentfragment.GetHashCode();
    if (HasTickrate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tickrate);
    if (HasTick) hash ^= Tick.GetHashCode();
    if (HasRtdelay) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rtdelay);
    if (HasRcvage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rcvage);
    if (HasKeyframeInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KeyframeInterval);
    if (HasCdndelay) hash ^= Cdndelay.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasMatchId) {
      output.WriteRawTag(8);
      output.WriteUInt64(MatchId);
    }
    if (HasInstanceId) {
      output.WriteRawTag(16);
      output.WriteUInt32(InstanceId);
    }
    if (HasSignupfragment) {
      output.WriteRawTag(24);
      output.WriteUInt32(Signupfragment);
    }
    if (HasCurrentfragment) {
      output.WriteRawTag(32);
      output.WriteUInt32(Currentfragment);
    }
    if (HasTickrate) {
      output.WriteRawTag(45);
      output.WriteFloat(Tickrate);
    }
    if (HasTick) {
      output.WriteRawTag(48);
      output.WriteUInt32(Tick);
    }
    if (HasRtdelay) {
      output.WriteRawTag(69);
      output.WriteFloat(Rtdelay);
    }
    if (HasRcvage) {
      output.WriteRawTag(77);
      output.WriteFloat(Rcvage);
    }
    if (HasKeyframeInterval) {
      output.WriteRawTag(85);
      output.WriteFloat(KeyframeInterval);
    }
    if (HasCdndelay) {
      output.WriteRawTag(88);
      output.WriteUInt32(Cdndelay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasMatchId) {
      output.WriteRawTag(8);
      output.WriteUInt64(MatchId);
    }
    if (HasInstanceId) {
      output.WriteRawTag(16);
      output.WriteUInt32(InstanceId);
    }
    if (HasSignupfragment) {
      output.WriteRawTag(24);
      output.WriteUInt32(Signupfragment);
    }
    if (HasCurrentfragment) {
      output.WriteRawTag(32);
      output.WriteUInt32(Currentfragment);
    }
    if (HasTickrate) {
      output.WriteRawTag(45);
      output.WriteFloat(Tickrate);
    }
    if (HasTick) {
      output.WriteRawTag(48);
      output.WriteUInt32(Tick);
    }
    if (HasRtdelay) {
      output.WriteRawTag(69);
      output.WriteFloat(Rtdelay);
    }
    if (HasRcvage) {
      output.WriteRawTag(77);
      output.WriteFloat(Rcvage);
    }
    if (HasKeyframeInterval) {
      output.WriteRawTag(85);
      output.WriteFloat(KeyframeInterval);
    }
    if (HasCdndelay) {
      output.WriteRawTag(88);
      output.WriteUInt32(Cdndelay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasMatchId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchId);
    }
    if (HasInstanceId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
    }
    if (HasSignupfragment) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Signupfragment);
    }
    if (HasCurrentfragment) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentfragment);
    }
    if (HasTickrate) {
      size += 1 + 4;
    }
    if (HasTick) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
    }
    if (HasRtdelay) {
      size += 1 + 4;
    }
    if (HasRcvage) {
      size += 1 + 4;
    }
    if (HasKeyframeInterval) {
      size += 1 + 4;
    }
    if (HasCdndelay) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cdndelay);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CEngineGotvSyncPacket other) {
    if (other == null) {
      return;
    }
    if (other.HasMatchId) {
      MatchId = other.MatchId;
    }
    if (other.HasInstanceId) {
      InstanceId = other.InstanceId;
    }
    if (other.HasSignupfragment) {
      Signupfragment = other.Signupfragment;
    }
    if (other.HasCurrentfragment) {
      Currentfragment = other.Currentfragment;
    }
    if (other.HasTickrate) {
      Tickrate = other.Tickrate;
    }
    if (other.HasTick) {
      Tick = other.Tick;
    }
    if (other.HasRtdelay) {
      Rtdelay = other.Rtdelay;
    }
    if (other.HasRcvage) {
      Rcvage = other.Rcvage;
    }
    if (other.HasKeyframeInterval) {
      KeyframeInterval = other.KeyframeInterval;
    }
    if (other.HasCdndelay) {
      Cdndelay = other.Cdndelay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MatchId = input.ReadUInt64();
          break;
        }
        case 16: {
          InstanceId = input.ReadUInt32();
          break;
        }
        case 24: {
          Signupfragment = input.ReadUInt32();
          break;
        }
        case 32: {
          Currentfragment = input.ReadUInt32();
          break;
        }
        case 45: {
          Tickrate = input.ReadFloat();
          break;
        }
        case 48: {
          Tick = input.ReadUInt32();
          break;
        }
        case 69: {
          Rtdelay = input.ReadFloat();
          break;
        }
        case 77: {
          Rcvage = input.ReadFloat();
          break;
        }
        case 85: {
          KeyframeInterval = input.ReadFloat();
          break;
        }
        case 88: {
          Cdndelay = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          MatchId = input.ReadUInt64();
          break;
        }
        case 16: {
          InstanceId = input.ReadUInt32();
          break;
        }
        case 24: {
          Signupfragment = input.ReadUInt32();
          break;
        }
        case 32: {
          Currentfragment = input.ReadUInt32();
          break;
        }
        case 45: {
          Tickrate = input.ReadFloat();
          break;
        }
        case 48: {
          Tick = input.ReadUInt32();
          break;
        }
        case 69: {
          Rtdelay = input.ReadFloat();
          break;
        }
        case 77: {
          Rcvage = input.ReadFloat();
          break;
        }
        case 85: {
          KeyframeInterval = input.ReadFloat();
          break;
        }
        case 88: {
          Cdndelay = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
