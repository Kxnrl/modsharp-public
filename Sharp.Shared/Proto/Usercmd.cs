// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: usercmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from usercmd.proto</summary>
public static partial class UsercmdReflection {

  #region Descriptor
  /// <summary>File descriptor for usercmd.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static UsercmdReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg11c2VyY21kLnByb3RvGhZuZXR3b3JrYmFzZXR5cGVzLnByb3RvIlQKEENJ",
          "bkJ1dHRvblN0YXRlUEISFAoMYnV0dG9uc3RhdGUxGAEgASgEEhQKDGJ1dHRv",
          "bnN0YXRlMhgCIAEoBBIUCgxidXR0b25zdGF0ZTMYAyABKAQiogEKEENTdWJ0",
          "aWNrTW92ZVN0ZXASDgoGYnV0dG9uGAEgASgEEg8KB3ByZXNzZWQYAiABKAgS",
          "DAoEd2hlbhgDIAEoAhIcChRhbmFsb2dfZm9yd2FyZF9kZWx0YRgEIAEoAhIZ",
          "ChFhbmFsb2dfbGVmdF9kZWx0YRgFIAEoAhITCgtwaXRjaF9kZWx0YRgIIAEo",
          "AhIRCgl5YXdfZGVsdGEYCSABKAIi4wMKDkNCYXNlVXNlckNtZFBCEh0KFWxl",
          "Z2FjeV9jb21tYW5kX251bWJlchgBIAEoBRITCgtjbGllbnRfdGljaxgCIAEo",
          "BRIkChxwcmVkaWN0aW9uX29mZnNldF90aWNrc194MjU2GBEgASgNEiUKCmJ1",
          "dHRvbnNfcGIYAyABKAsyES5DSW5CdXR0b25TdGF0ZVBCEh8KCnZpZXdhbmds",
          "ZXMYBCABKAsyCy5DTXNnUUFuZ2xlEhMKC2ZvcndhcmRtb3ZlGAUgASgCEhAK",
          "CGxlZnRtb3ZlGAYgASgCEg4KBnVwbW92ZRgHIAEoAhIPCgdpbXB1bHNlGAgg",
          "ASgFEhQKDHdlYXBvbnNlbGVjdBgJIAEoBRITCgtyYW5kb21fc2VlZBgKIAEo",
          "BRIPCgdtb3VzZWR4GAsgASgFEg8KB21vdXNlZHkYDCABKAUSJAoScGF3bl9l",
          "bnRpdHlfaGFuZGxlGA4gASgNOggxNjc3NzIxNRIoCg1zdWJ0aWNrX21vdmVz",
          "GBIgAygLMhEuQ1N1YnRpY2tNb3ZlU3RlcBIQCghtb3ZlX2NyYxgTIAEoDBIl",
          "Ch1jb25zdW1lZF9zZXJ2ZXJfYW5nbGVfY2hhbmdlcxgUIAEoDRIRCgljbWRf",
          "ZmxhZ3MYFSABKAUiLwoOQ1VzZXJDbWRCYXNlUEISHQoEYmFzZRgBIAEoCzIP",
          "LkNCYXNlVXNlckNtZFBC"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::NetworkbasetypesReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CInButtonStatePB), global::CInButtonStatePB.Parser, new[]{ "Buttonstate1", "Buttonstate2", "Buttonstate3" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSubtickMoveStep), global::CSubtickMoveStep.Parser, new[]{ "Button", "Pressed", "When", "AnalogForwardDelta", "AnalogLeftDelta", "PitchDelta", "YawDelta" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CBaseUserCmdPB), global::CBaseUserCmdPB.Parser, new[]{ "LegacyCommandNumber", "ClientTick", "PredictionOffsetTicksX256", "ButtonsPb", "Viewangles", "Forwardmove", "Leftmove", "Upmove", "Impulse", "Weaponselect", "RandomSeed", "Mousedx", "Mousedy", "PawnEntityHandle", "SubtickMoves", "MoveCrc", "ConsumedServerAngleChanges", "CmdFlags" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CUserCmdBasePB), global::CUserCmdBasePB.Parser, new[]{ "Base" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CInButtonStatePB : pb::IMessage<CInButtonStatePB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CInButtonStatePB> _parser = new pb::MessageParser<CInButtonStatePB>(() => new CInButtonStatePB());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CInButtonStatePB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UsercmdReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CInButtonStatePB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CInButtonStatePB(CInButtonStatePB other) : this() {
    _hasBits0 = other._hasBits0;
    buttonstate1_ = other.buttonstate1_;
    buttonstate2_ = other.buttonstate2_;
    buttonstate3_ = other.buttonstate3_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CInButtonStatePB Clone() {
    return new CInButtonStatePB(this);
  }

  /// <summary>Field number for the "buttonstate1" field.</summary>
  public const int Buttonstate1FieldNumber = 1;
  private readonly static ulong Buttonstate1DefaultValue = 0UL;

  private ulong buttonstate1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Buttonstate1 {
    get { if ((_hasBits0 & 1) != 0) { return buttonstate1_; } else { return Buttonstate1DefaultValue; } }
    set {
      _hasBits0 |= 1;
      buttonstate1_ = value;
    }
  }
  /// <summary>Gets whether the "buttonstate1" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasButtonstate1 {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "buttonstate1" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearButtonstate1() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "buttonstate2" field.</summary>
  public const int Buttonstate2FieldNumber = 2;
  private readonly static ulong Buttonstate2DefaultValue = 0UL;

  private ulong buttonstate2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Buttonstate2 {
    get { if ((_hasBits0 & 2) != 0) { return buttonstate2_; } else { return Buttonstate2DefaultValue; } }
    set {
      _hasBits0 |= 2;
      buttonstate2_ = value;
    }
  }
  /// <summary>Gets whether the "buttonstate2" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasButtonstate2 {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "buttonstate2" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearButtonstate2() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "buttonstate3" field.</summary>
  public const int Buttonstate3FieldNumber = 3;
  private readonly static ulong Buttonstate3DefaultValue = 0UL;

  private ulong buttonstate3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Buttonstate3 {
    get { if ((_hasBits0 & 4) != 0) { return buttonstate3_; } else { return Buttonstate3DefaultValue; } }
    set {
      _hasBits0 |= 4;
      buttonstate3_ = value;
    }
  }
  /// <summary>Gets whether the "buttonstate3" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasButtonstate3 {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "buttonstate3" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearButtonstate3() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CInButtonStatePB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CInButtonStatePB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Buttonstate1 != other.Buttonstate1) return false;
    if (Buttonstate2 != other.Buttonstate2) return false;
    if (Buttonstate3 != other.Buttonstate3) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasButtonstate1) hash ^= Buttonstate1.GetHashCode();
    if (HasButtonstate2) hash ^= Buttonstate2.GetHashCode();
    if (HasButtonstate3) hash ^= Buttonstate3.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasButtonstate1) {
      output.WriteRawTag(8);
      output.WriteUInt64(Buttonstate1);
    }
    if (HasButtonstate2) {
      output.WriteRawTag(16);
      output.WriteUInt64(Buttonstate2);
    }
    if (HasButtonstate3) {
      output.WriteRawTag(24);
      output.WriteUInt64(Buttonstate3);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasButtonstate1) {
      output.WriteRawTag(8);
      output.WriteUInt64(Buttonstate1);
    }
    if (HasButtonstate2) {
      output.WriteRawTag(16);
      output.WriteUInt64(Buttonstate2);
    }
    if (HasButtonstate3) {
      output.WriteRawTag(24);
      output.WriteUInt64(Buttonstate3);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasButtonstate1) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Buttonstate1);
    }
    if (HasButtonstate2) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Buttonstate2);
    }
    if (HasButtonstate3) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Buttonstate3);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CInButtonStatePB other) {
    if (other == null) {
      return;
    }
    if (other.HasButtonstate1) {
      Buttonstate1 = other.Buttonstate1;
    }
    if (other.HasButtonstate2) {
      Buttonstate2 = other.Buttonstate2;
    }
    if (other.HasButtonstate3) {
      Buttonstate3 = other.Buttonstate3;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Buttonstate1 = input.ReadUInt64();
          break;
        }
        case 16: {
          Buttonstate2 = input.ReadUInt64();
          break;
        }
        case 24: {
          Buttonstate3 = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Buttonstate1 = input.ReadUInt64();
          break;
        }
        case 16: {
          Buttonstate2 = input.ReadUInt64();
          break;
        }
        case 24: {
          Buttonstate3 = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CSubtickMoveStep : pb::IMessage<CSubtickMoveStep>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CSubtickMoveStep> _parser = new pb::MessageParser<CSubtickMoveStep>(() => new CSubtickMoveStep());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CSubtickMoveStep> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UsercmdReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSubtickMoveStep() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSubtickMoveStep(CSubtickMoveStep other) : this() {
    _hasBits0 = other._hasBits0;
    button_ = other.button_;
    pressed_ = other.pressed_;
    when_ = other.when_;
    analogForwardDelta_ = other.analogForwardDelta_;
    analogLeftDelta_ = other.analogLeftDelta_;
    pitchDelta_ = other.pitchDelta_;
    yawDelta_ = other.yawDelta_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSubtickMoveStep Clone() {
    return new CSubtickMoveStep(this);
  }

  /// <summary>Field number for the "button" field.</summary>
  public const int ButtonFieldNumber = 1;
  private readonly static ulong ButtonDefaultValue = 0UL;

  private ulong button_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Button {
    get { if ((_hasBits0 & 1) != 0) { return button_; } else { return ButtonDefaultValue; } }
    set {
      _hasBits0 |= 1;
      button_ = value;
    }
  }
  /// <summary>Gets whether the "button" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasButton {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "button" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearButton() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "pressed" field.</summary>
  public const int PressedFieldNumber = 2;
  private readonly static bool PressedDefaultValue = false;

  private bool pressed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Pressed {
    get { if ((_hasBits0 & 2) != 0) { return pressed_; } else { return PressedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      pressed_ = value;
    }
  }
  /// <summary>Gets whether the "pressed" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPressed {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "pressed" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPressed() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "when" field.</summary>
  public const int WhenFieldNumber = 3;
  private readonly static float WhenDefaultValue = 0F;

  private float when_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float When {
    get { if ((_hasBits0 & 4) != 0) { return when_; } else { return WhenDefaultValue; } }
    set {
      _hasBits0 |= 4;
      when_ = value;
    }
  }
  /// <summary>Gets whether the "when" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWhen {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "when" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWhen() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "analog_forward_delta" field.</summary>
  public const int AnalogForwardDeltaFieldNumber = 4;
  private readonly static float AnalogForwardDeltaDefaultValue = 0F;

  private float analogForwardDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AnalogForwardDelta {
    get { if ((_hasBits0 & 8) != 0) { return analogForwardDelta_; } else { return AnalogForwardDeltaDefaultValue; } }
    set {
      _hasBits0 |= 8;
      analogForwardDelta_ = value;
    }
  }
  /// <summary>Gets whether the "analog_forward_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAnalogForwardDelta {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "analog_forward_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAnalogForwardDelta() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "analog_left_delta" field.</summary>
  public const int AnalogLeftDeltaFieldNumber = 5;
  private readonly static float AnalogLeftDeltaDefaultValue = 0F;

  private float analogLeftDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AnalogLeftDelta {
    get { if ((_hasBits0 & 16) != 0) { return analogLeftDelta_; } else { return AnalogLeftDeltaDefaultValue; } }
    set {
      _hasBits0 |= 16;
      analogLeftDelta_ = value;
    }
  }
  /// <summary>Gets whether the "analog_left_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAnalogLeftDelta {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "analog_left_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAnalogLeftDelta() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "pitch_delta" field.</summary>
  public const int PitchDeltaFieldNumber = 8;
  private readonly static float PitchDeltaDefaultValue = 0F;

  private float pitchDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PitchDelta {
    get { if ((_hasBits0 & 32) != 0) { return pitchDelta_; } else { return PitchDeltaDefaultValue; } }
    set {
      _hasBits0 |= 32;
      pitchDelta_ = value;
    }
  }
  /// <summary>Gets whether the "pitch_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPitchDelta {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "pitch_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPitchDelta() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "yaw_delta" field.</summary>
  public const int YawDeltaFieldNumber = 9;
  private readonly static float YawDeltaDefaultValue = 0F;

  private float yawDelta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float YawDelta {
    get { if ((_hasBits0 & 64) != 0) { return yawDelta_; } else { return YawDeltaDefaultValue; } }
    set {
      _hasBits0 |= 64;
      yawDelta_ = value;
    }
  }
  /// <summary>Gets whether the "yaw_delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYawDelta {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "yaw_delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYawDelta() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CSubtickMoveStep);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CSubtickMoveStep other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Button != other.Button) return false;
    if (Pressed != other.Pressed) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(When, other.When)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnalogForwardDelta, other.AnalogForwardDelta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnalogLeftDelta, other.AnalogLeftDelta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PitchDelta, other.PitchDelta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawDelta, other.YawDelta)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasButton) hash ^= Button.GetHashCode();
    if (HasPressed) hash ^= Pressed.GetHashCode();
    if (HasWhen) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(When);
    if (HasAnalogForwardDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnalogForwardDelta);
    if (HasAnalogLeftDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnalogLeftDelta);
    if (HasPitchDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PitchDelta);
    if (HasYawDelta) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawDelta);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasButton) {
      output.WriteRawTag(8);
      output.WriteUInt64(Button);
    }
    if (HasPressed) {
      output.WriteRawTag(16);
      output.WriteBool(Pressed);
    }
    if (HasWhen) {
      output.WriteRawTag(29);
      output.WriteFloat(When);
    }
    if (HasAnalogForwardDelta) {
      output.WriteRawTag(37);
      output.WriteFloat(AnalogForwardDelta);
    }
    if (HasAnalogLeftDelta) {
      output.WriteRawTag(45);
      output.WriteFloat(AnalogLeftDelta);
    }
    if (HasPitchDelta) {
      output.WriteRawTag(69);
      output.WriteFloat(PitchDelta);
    }
    if (HasYawDelta) {
      output.WriteRawTag(77);
      output.WriteFloat(YawDelta);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasButton) {
      output.WriteRawTag(8);
      output.WriteUInt64(Button);
    }
    if (HasPressed) {
      output.WriteRawTag(16);
      output.WriteBool(Pressed);
    }
    if (HasWhen) {
      output.WriteRawTag(29);
      output.WriteFloat(When);
    }
    if (HasAnalogForwardDelta) {
      output.WriteRawTag(37);
      output.WriteFloat(AnalogForwardDelta);
    }
    if (HasAnalogLeftDelta) {
      output.WriteRawTag(45);
      output.WriteFloat(AnalogLeftDelta);
    }
    if (HasPitchDelta) {
      output.WriteRawTag(69);
      output.WriteFloat(PitchDelta);
    }
    if (HasYawDelta) {
      output.WriteRawTag(77);
      output.WriteFloat(YawDelta);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasButton) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Button);
    }
    if (HasPressed) {
      size += 1 + 1;
    }
    if (HasWhen) {
      size += 1 + 4;
    }
    if (HasAnalogForwardDelta) {
      size += 1 + 4;
    }
    if (HasAnalogLeftDelta) {
      size += 1 + 4;
    }
    if (HasPitchDelta) {
      size += 1 + 4;
    }
    if (HasYawDelta) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CSubtickMoveStep other) {
    if (other == null) {
      return;
    }
    if (other.HasButton) {
      Button = other.Button;
    }
    if (other.HasPressed) {
      Pressed = other.Pressed;
    }
    if (other.HasWhen) {
      When = other.When;
    }
    if (other.HasAnalogForwardDelta) {
      AnalogForwardDelta = other.AnalogForwardDelta;
    }
    if (other.HasAnalogLeftDelta) {
      AnalogLeftDelta = other.AnalogLeftDelta;
    }
    if (other.HasPitchDelta) {
      PitchDelta = other.PitchDelta;
    }
    if (other.HasYawDelta) {
      YawDelta = other.YawDelta;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Button = input.ReadUInt64();
          break;
        }
        case 16: {
          Pressed = input.ReadBool();
          break;
        }
        case 29: {
          When = input.ReadFloat();
          break;
        }
        case 37: {
          AnalogForwardDelta = input.ReadFloat();
          break;
        }
        case 45: {
          AnalogLeftDelta = input.ReadFloat();
          break;
        }
        case 69: {
          PitchDelta = input.ReadFloat();
          break;
        }
        case 77: {
          YawDelta = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Button = input.ReadUInt64();
          break;
        }
        case 16: {
          Pressed = input.ReadBool();
          break;
        }
        case 29: {
          When = input.ReadFloat();
          break;
        }
        case 37: {
          AnalogForwardDelta = input.ReadFloat();
          break;
        }
        case 45: {
          AnalogLeftDelta = input.ReadFloat();
          break;
        }
        case 69: {
          PitchDelta = input.ReadFloat();
          break;
        }
        case 77: {
          YawDelta = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CBaseUserCmdPB : pb::IMessage<CBaseUserCmdPB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CBaseUserCmdPB> _parser = new pb::MessageParser<CBaseUserCmdPB>(() => new CBaseUserCmdPB());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CBaseUserCmdPB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UsercmdReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CBaseUserCmdPB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CBaseUserCmdPB(CBaseUserCmdPB other) : this() {
    _hasBits0 = other._hasBits0;
    legacyCommandNumber_ = other.legacyCommandNumber_;
    clientTick_ = other.clientTick_;
    predictionOffsetTicksX256_ = other.predictionOffsetTicksX256_;
    buttonsPb_ = other.buttonsPb_ != null ? other.buttonsPb_.Clone() : null;
    viewangles_ = other.viewangles_ != null ? other.viewangles_.Clone() : null;
    forwardmove_ = other.forwardmove_;
    leftmove_ = other.leftmove_;
    upmove_ = other.upmove_;
    impulse_ = other.impulse_;
    weaponselect_ = other.weaponselect_;
    randomSeed_ = other.randomSeed_;
    mousedx_ = other.mousedx_;
    mousedy_ = other.mousedy_;
    pawnEntityHandle_ = other.pawnEntityHandle_;
    subtickMoves_ = other.subtickMoves_.Clone();
    moveCrc_ = other.moveCrc_;
    consumedServerAngleChanges_ = other.consumedServerAngleChanges_;
    cmdFlags_ = other.cmdFlags_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CBaseUserCmdPB Clone() {
    return new CBaseUserCmdPB(this);
  }

  /// <summary>Field number for the "legacy_command_number" field.</summary>
  public const int LegacyCommandNumberFieldNumber = 1;
  private readonly static int LegacyCommandNumberDefaultValue = 0;

  private int legacyCommandNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int LegacyCommandNumber {
    get { if ((_hasBits0 & 1) != 0) { return legacyCommandNumber_; } else { return LegacyCommandNumberDefaultValue; } }
    set {
      _hasBits0 |= 1;
      legacyCommandNumber_ = value;
    }
  }
  /// <summary>Gets whether the "legacy_command_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegacyCommandNumber {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "legacy_command_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegacyCommandNumber() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "client_tick" field.</summary>
  public const int ClientTickFieldNumber = 2;
  private readonly static int ClientTickDefaultValue = 0;

  private int clientTick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ClientTick {
    get { if ((_hasBits0 & 2) != 0) { return clientTick_; } else { return ClientTickDefaultValue; } }
    set {
      _hasBits0 |= 2;
      clientTick_ = value;
    }
  }
  /// <summary>Gets whether the "client_tick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientTick {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "client_tick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientTick() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "prediction_offset_ticks_x256" field.</summary>
  public const int PredictionOffsetTicksX256FieldNumber = 17;
  private readonly static uint PredictionOffsetTicksX256DefaultValue = 0;

  private uint predictionOffsetTicksX256_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PredictionOffsetTicksX256 {
    get { if ((_hasBits0 & 2048) != 0) { return predictionOffsetTicksX256_; } else { return PredictionOffsetTicksX256DefaultValue; } }
    set {
      _hasBits0 |= 2048;
      predictionOffsetTicksX256_ = value;
    }
  }
  /// <summary>Gets whether the "prediction_offset_ticks_x256" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPredictionOffsetTicksX256 {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "prediction_offset_ticks_x256" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPredictionOffsetTicksX256() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "buttons_pb" field.</summary>
  public const int ButtonsPbFieldNumber = 3;
  private global::CInButtonStatePB buttonsPb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CInButtonStatePB ButtonsPb {
    get { return buttonsPb_; }
    set {
      buttonsPb_ = value;
    }
  }

  /// <summary>Field number for the "viewangles" field.</summary>
  public const int ViewanglesFieldNumber = 4;
  private global::CMsgQAngle viewangles_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgQAngle Viewangles {
    get { return viewangles_; }
    set {
      viewangles_ = value;
    }
  }

  /// <summary>Field number for the "forwardmove" field.</summary>
  public const int ForwardmoveFieldNumber = 5;
  private readonly static float ForwardmoveDefaultValue = 0F;

  private float forwardmove_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Forwardmove {
    get { if ((_hasBits0 & 4) != 0) { return forwardmove_; } else { return ForwardmoveDefaultValue; } }
    set {
      _hasBits0 |= 4;
      forwardmove_ = value;
    }
  }
  /// <summary>Gets whether the "forwardmove" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasForwardmove {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "forwardmove" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearForwardmove() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "leftmove" field.</summary>
  public const int LeftmoveFieldNumber = 6;
  private readonly static float LeftmoveDefaultValue = 0F;

  private float leftmove_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Leftmove {
    get { if ((_hasBits0 & 8) != 0) { return leftmove_; } else { return LeftmoveDefaultValue; } }
    set {
      _hasBits0 |= 8;
      leftmove_ = value;
    }
  }
  /// <summary>Gets whether the "leftmove" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeftmove {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "leftmove" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeftmove() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "upmove" field.</summary>
  public const int UpmoveFieldNumber = 7;
  private readonly static float UpmoveDefaultValue = 0F;

  private float upmove_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Upmove {
    get { if ((_hasBits0 & 16) != 0) { return upmove_; } else { return UpmoveDefaultValue; } }
    set {
      _hasBits0 |= 16;
      upmove_ = value;
    }
  }
  /// <summary>Gets whether the "upmove" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUpmove {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "upmove" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUpmove() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "impulse" field.</summary>
  public const int ImpulseFieldNumber = 8;
  private readonly static int ImpulseDefaultValue = 0;

  private int impulse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Impulse {
    get { if ((_hasBits0 & 32) != 0) { return impulse_; } else { return ImpulseDefaultValue; } }
    set {
      _hasBits0 |= 32;
      impulse_ = value;
    }
  }
  /// <summary>Gets whether the "impulse" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasImpulse {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "impulse" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearImpulse() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "weaponselect" field.</summary>
  public const int WeaponselectFieldNumber = 9;
  private readonly static int WeaponselectDefaultValue = 0;

  private int weaponselect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Weaponselect {
    get { if ((_hasBits0 & 64) != 0) { return weaponselect_; } else { return WeaponselectDefaultValue; } }
    set {
      _hasBits0 |= 64;
      weaponselect_ = value;
    }
  }
  /// <summary>Gets whether the "weaponselect" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWeaponselect {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "weaponselect" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWeaponselect() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "random_seed" field.</summary>
  public const int RandomSeedFieldNumber = 10;
  private readonly static int RandomSeedDefaultValue = 0;

  private int randomSeed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RandomSeed {
    get { if ((_hasBits0 & 128) != 0) { return randomSeed_; } else { return RandomSeedDefaultValue; } }
    set {
      _hasBits0 |= 128;
      randomSeed_ = value;
    }
  }
  /// <summary>Gets whether the "random_seed" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRandomSeed {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "random_seed" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRandomSeed() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "mousedx" field.</summary>
  public const int MousedxFieldNumber = 11;
  private readonly static int MousedxDefaultValue = 0;

  private int mousedx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Mousedx {
    get { if ((_hasBits0 & 256) != 0) { return mousedx_; } else { return MousedxDefaultValue; } }
    set {
      _hasBits0 |= 256;
      mousedx_ = value;
    }
  }
  /// <summary>Gets whether the "mousedx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMousedx {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "mousedx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMousedx() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "mousedy" field.</summary>
  public const int MousedyFieldNumber = 12;
  private readonly static int MousedyDefaultValue = 0;

  private int mousedy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Mousedy {
    get { if ((_hasBits0 & 512) != 0) { return mousedy_; } else { return MousedyDefaultValue; } }
    set {
      _hasBits0 |= 512;
      mousedy_ = value;
    }
  }
  /// <summary>Gets whether the "mousedy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMousedy {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "mousedy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMousedy() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "pawn_entity_handle" field.</summary>
  public const int PawnEntityHandleFieldNumber = 14;
  private readonly static uint PawnEntityHandleDefaultValue = 16777215;

  private uint pawnEntityHandle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PawnEntityHandle {
    get { if ((_hasBits0 & 1024) != 0) { return pawnEntityHandle_; } else { return PawnEntityHandleDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      pawnEntityHandle_ = value;
    }
  }
  /// <summary>Gets whether the "pawn_entity_handle" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPawnEntityHandle {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "pawn_entity_handle" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPawnEntityHandle() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "subtick_moves" field.</summary>
  public const int SubtickMovesFieldNumber = 18;
  private static readonly pb::FieldCodec<global::CSubtickMoveStep> _repeated_subtickMoves_codec
      = pb::FieldCodec.ForMessage(146, global::CSubtickMoveStep.Parser);
  private readonly pbc::RepeatedField<global::CSubtickMoveStep> subtickMoves_ = new pbc::RepeatedField<global::CSubtickMoveStep>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CSubtickMoveStep> SubtickMoves {
    get { return subtickMoves_; }
  }

  /// <summary>Field number for the "move_crc" field.</summary>
  public const int MoveCrcFieldNumber = 19;
  private readonly static pb::ByteString MoveCrcDefaultValue = pb::ByteString.Empty;

  private pb::ByteString moveCrc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString MoveCrc {
    get { return moveCrc_ ?? MoveCrcDefaultValue; }
    set {
      moveCrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "move_crc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoveCrc {
    get { return moveCrc_ != null; }
  }
  /// <summary>Clears the value of the "move_crc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoveCrc() {
    moveCrc_ = null;
  }

  /// <summary>Field number for the "consumed_server_angle_changes" field.</summary>
  public const int ConsumedServerAngleChangesFieldNumber = 20;
  private readonly static uint ConsumedServerAngleChangesDefaultValue = 0;

  private uint consumedServerAngleChanges_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ConsumedServerAngleChanges {
    get { if ((_hasBits0 & 4096) != 0) { return consumedServerAngleChanges_; } else { return ConsumedServerAngleChangesDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      consumedServerAngleChanges_ = value;
    }
  }
  /// <summary>Gets whether the "consumed_server_angle_changes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConsumedServerAngleChanges {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "consumed_server_angle_changes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConsumedServerAngleChanges() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "cmd_flags" field.</summary>
  public const int CmdFlagsFieldNumber = 21;
  private readonly static int CmdFlagsDefaultValue = 0;

  private int cmdFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CmdFlags {
    get { if ((_hasBits0 & 8192) != 0) { return cmdFlags_; } else { return CmdFlagsDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      cmdFlags_ = value;
    }
  }
  /// <summary>Gets whether the "cmd_flags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCmdFlags {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "cmd_flags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCmdFlags() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CBaseUserCmdPB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CBaseUserCmdPB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LegacyCommandNumber != other.LegacyCommandNumber) return false;
    if (ClientTick != other.ClientTick) return false;
    if (PredictionOffsetTicksX256 != other.PredictionOffsetTicksX256) return false;
    if (!object.Equals(ButtonsPb, other.ButtonsPb)) return false;
    if (!object.Equals(Viewangles, other.Viewangles)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Forwardmove, other.Forwardmove)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Leftmove, other.Leftmove)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Upmove, other.Upmove)) return false;
    if (Impulse != other.Impulse) return false;
    if (Weaponselect != other.Weaponselect) return false;
    if (RandomSeed != other.RandomSeed) return false;
    if (Mousedx != other.Mousedx) return false;
    if (Mousedy != other.Mousedy) return false;
    if (PawnEntityHandle != other.PawnEntityHandle) return false;
    if(!subtickMoves_.Equals(other.subtickMoves_)) return false;
    if (MoveCrc != other.MoveCrc) return false;
    if (ConsumedServerAngleChanges != other.ConsumedServerAngleChanges) return false;
    if (CmdFlags != other.CmdFlags) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLegacyCommandNumber) hash ^= LegacyCommandNumber.GetHashCode();
    if (HasClientTick) hash ^= ClientTick.GetHashCode();
    if (HasPredictionOffsetTicksX256) hash ^= PredictionOffsetTicksX256.GetHashCode();
    if (buttonsPb_ != null) hash ^= ButtonsPb.GetHashCode();
    if (viewangles_ != null) hash ^= Viewangles.GetHashCode();
    if (HasForwardmove) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Forwardmove);
    if (HasLeftmove) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Leftmove);
    if (HasUpmove) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Upmove);
    if (HasImpulse) hash ^= Impulse.GetHashCode();
    if (HasWeaponselect) hash ^= Weaponselect.GetHashCode();
    if (HasRandomSeed) hash ^= RandomSeed.GetHashCode();
    if (HasMousedx) hash ^= Mousedx.GetHashCode();
    if (HasMousedy) hash ^= Mousedy.GetHashCode();
    if (HasPawnEntityHandle) hash ^= PawnEntityHandle.GetHashCode();
    hash ^= subtickMoves_.GetHashCode();
    if (HasMoveCrc) hash ^= MoveCrc.GetHashCode();
    if (HasConsumedServerAngleChanges) hash ^= ConsumedServerAngleChanges.GetHashCode();
    if (HasCmdFlags) hash ^= CmdFlags.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLegacyCommandNumber) {
      output.WriteRawTag(8);
      output.WriteInt32(LegacyCommandNumber);
    }
    if (HasClientTick) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientTick);
    }
    if (buttonsPb_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ButtonsPb);
    }
    if (viewangles_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Viewangles);
    }
    if (HasForwardmove) {
      output.WriteRawTag(45);
      output.WriteFloat(Forwardmove);
    }
    if (HasLeftmove) {
      output.WriteRawTag(53);
      output.WriteFloat(Leftmove);
    }
    if (HasUpmove) {
      output.WriteRawTag(61);
      output.WriteFloat(Upmove);
    }
    if (HasImpulse) {
      output.WriteRawTag(64);
      output.WriteInt32(Impulse);
    }
    if (HasWeaponselect) {
      output.WriteRawTag(72);
      output.WriteInt32(Weaponselect);
    }
    if (HasRandomSeed) {
      output.WriteRawTag(80);
      output.WriteInt32(RandomSeed);
    }
    if (HasMousedx) {
      output.WriteRawTag(88);
      output.WriteInt32(Mousedx);
    }
    if (HasMousedy) {
      output.WriteRawTag(96);
      output.WriteInt32(Mousedy);
    }
    if (HasPawnEntityHandle) {
      output.WriteRawTag(112);
      output.WriteUInt32(PawnEntityHandle);
    }
    if (HasPredictionOffsetTicksX256) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(PredictionOffsetTicksX256);
    }
    subtickMoves_.WriteTo(output, _repeated_subtickMoves_codec);
    if (HasMoveCrc) {
      output.WriteRawTag(154, 1);
      output.WriteBytes(MoveCrc);
    }
    if (HasConsumedServerAngleChanges) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(ConsumedServerAngleChanges);
    }
    if (HasCmdFlags) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(CmdFlags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLegacyCommandNumber) {
      output.WriteRawTag(8);
      output.WriteInt32(LegacyCommandNumber);
    }
    if (HasClientTick) {
      output.WriteRawTag(16);
      output.WriteInt32(ClientTick);
    }
    if (buttonsPb_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ButtonsPb);
    }
    if (viewangles_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Viewangles);
    }
    if (HasForwardmove) {
      output.WriteRawTag(45);
      output.WriteFloat(Forwardmove);
    }
    if (HasLeftmove) {
      output.WriteRawTag(53);
      output.WriteFloat(Leftmove);
    }
    if (HasUpmove) {
      output.WriteRawTag(61);
      output.WriteFloat(Upmove);
    }
    if (HasImpulse) {
      output.WriteRawTag(64);
      output.WriteInt32(Impulse);
    }
    if (HasWeaponselect) {
      output.WriteRawTag(72);
      output.WriteInt32(Weaponselect);
    }
    if (HasRandomSeed) {
      output.WriteRawTag(80);
      output.WriteInt32(RandomSeed);
    }
    if (HasMousedx) {
      output.WriteRawTag(88);
      output.WriteInt32(Mousedx);
    }
    if (HasMousedy) {
      output.WriteRawTag(96);
      output.WriteInt32(Mousedy);
    }
    if (HasPawnEntityHandle) {
      output.WriteRawTag(112);
      output.WriteUInt32(PawnEntityHandle);
    }
    if (HasPredictionOffsetTicksX256) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(PredictionOffsetTicksX256);
    }
    subtickMoves_.WriteTo(ref output, _repeated_subtickMoves_codec);
    if (HasMoveCrc) {
      output.WriteRawTag(154, 1);
      output.WriteBytes(MoveCrc);
    }
    if (HasConsumedServerAngleChanges) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(ConsumedServerAngleChanges);
    }
    if (HasCmdFlags) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(CmdFlags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLegacyCommandNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LegacyCommandNumber);
    }
    if (HasClientTick) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientTick);
    }
    if (HasPredictionOffsetTicksX256) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PredictionOffsetTicksX256);
    }
    if (buttonsPb_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ButtonsPb);
    }
    if (viewangles_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewangles);
    }
    if (HasForwardmove) {
      size += 1 + 4;
    }
    if (HasLeftmove) {
      size += 1 + 4;
    }
    if (HasUpmove) {
      size += 1 + 4;
    }
    if (HasImpulse) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Impulse);
    }
    if (HasWeaponselect) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weaponselect);
    }
    if (HasRandomSeed) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
    }
    if (HasMousedx) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mousedx);
    }
    if (HasMousedy) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mousedy);
    }
    if (HasPawnEntityHandle) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PawnEntityHandle);
    }
    size += subtickMoves_.CalculateSize(_repeated_subtickMoves_codec);
    if (HasMoveCrc) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(MoveCrc);
    }
    if (HasConsumedServerAngleChanges) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConsumedServerAngleChanges);
    }
    if (HasCmdFlags) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CmdFlags);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CBaseUserCmdPB other) {
    if (other == null) {
      return;
    }
    if (other.HasLegacyCommandNumber) {
      LegacyCommandNumber = other.LegacyCommandNumber;
    }
    if (other.HasClientTick) {
      ClientTick = other.ClientTick;
    }
    if (other.HasPredictionOffsetTicksX256) {
      PredictionOffsetTicksX256 = other.PredictionOffsetTicksX256;
    }
    if (other.buttonsPb_ != null) {
      if (buttonsPb_ == null) {
        ButtonsPb = new global::CInButtonStatePB();
      }
      ButtonsPb.MergeFrom(other.ButtonsPb);
    }
    if (other.viewangles_ != null) {
      if (viewangles_ == null) {
        Viewangles = new global::CMsgQAngle();
      }
      Viewangles.MergeFrom(other.Viewangles);
    }
    if (other.HasForwardmove) {
      Forwardmove = other.Forwardmove;
    }
    if (other.HasLeftmove) {
      Leftmove = other.Leftmove;
    }
    if (other.HasUpmove) {
      Upmove = other.Upmove;
    }
    if (other.HasImpulse) {
      Impulse = other.Impulse;
    }
    if (other.HasWeaponselect) {
      Weaponselect = other.Weaponselect;
    }
    if (other.HasRandomSeed) {
      RandomSeed = other.RandomSeed;
    }
    if (other.HasMousedx) {
      Mousedx = other.Mousedx;
    }
    if (other.HasMousedy) {
      Mousedy = other.Mousedy;
    }
    if (other.HasPawnEntityHandle) {
      PawnEntityHandle = other.PawnEntityHandle;
    }
    subtickMoves_.Add(other.subtickMoves_);
    if (other.HasMoveCrc) {
      MoveCrc = other.MoveCrc;
    }
    if (other.HasConsumedServerAngleChanges) {
      ConsumedServerAngleChanges = other.ConsumedServerAngleChanges;
    }
    if (other.HasCmdFlags) {
      CmdFlags = other.CmdFlags;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LegacyCommandNumber = input.ReadInt32();
          break;
        }
        case 16: {
          ClientTick = input.ReadInt32();
          break;
        }
        case 26: {
          if (buttonsPb_ == null) {
            ButtonsPb = new global::CInButtonStatePB();
          }
          input.ReadMessage(ButtonsPb);
          break;
        }
        case 34: {
          if (viewangles_ == null) {
            Viewangles = new global::CMsgQAngle();
          }
          input.ReadMessage(Viewangles);
          break;
        }
        case 45: {
          Forwardmove = input.ReadFloat();
          break;
        }
        case 53: {
          Leftmove = input.ReadFloat();
          break;
        }
        case 61: {
          Upmove = input.ReadFloat();
          break;
        }
        case 64: {
          Impulse = input.ReadInt32();
          break;
        }
        case 72: {
          Weaponselect = input.ReadInt32();
          break;
        }
        case 80: {
          RandomSeed = input.ReadInt32();
          break;
        }
        case 88: {
          Mousedx = input.ReadInt32();
          break;
        }
        case 96: {
          Mousedy = input.ReadInt32();
          break;
        }
        case 112: {
          PawnEntityHandle = input.ReadUInt32();
          break;
        }
        case 136: {
          PredictionOffsetTicksX256 = input.ReadUInt32();
          break;
        }
        case 146: {
          subtickMoves_.AddEntriesFrom(input, _repeated_subtickMoves_codec);
          break;
        }
        case 154: {
          MoveCrc = input.ReadBytes();
          break;
        }
        case 160: {
          ConsumedServerAngleChanges = input.ReadUInt32();
          break;
        }
        case 168: {
          CmdFlags = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LegacyCommandNumber = input.ReadInt32();
          break;
        }
        case 16: {
          ClientTick = input.ReadInt32();
          break;
        }
        case 26: {
          if (buttonsPb_ == null) {
            ButtonsPb = new global::CInButtonStatePB();
          }
          input.ReadMessage(ButtonsPb);
          break;
        }
        case 34: {
          if (viewangles_ == null) {
            Viewangles = new global::CMsgQAngle();
          }
          input.ReadMessage(Viewangles);
          break;
        }
        case 45: {
          Forwardmove = input.ReadFloat();
          break;
        }
        case 53: {
          Leftmove = input.ReadFloat();
          break;
        }
        case 61: {
          Upmove = input.ReadFloat();
          break;
        }
        case 64: {
          Impulse = input.ReadInt32();
          break;
        }
        case 72: {
          Weaponselect = input.ReadInt32();
          break;
        }
        case 80: {
          RandomSeed = input.ReadInt32();
          break;
        }
        case 88: {
          Mousedx = input.ReadInt32();
          break;
        }
        case 96: {
          Mousedy = input.ReadInt32();
          break;
        }
        case 112: {
          PawnEntityHandle = input.ReadUInt32();
          break;
        }
        case 136: {
          PredictionOffsetTicksX256 = input.ReadUInt32();
          break;
        }
        case 146: {
          subtickMoves_.AddEntriesFrom(ref input, _repeated_subtickMoves_codec);
          break;
        }
        case 154: {
          MoveCrc = input.ReadBytes();
          break;
        }
        case 160: {
          ConsumedServerAngleChanges = input.ReadUInt32();
          break;
        }
        case 168: {
          CmdFlags = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CUserCmdBasePB : pb::IMessage<CUserCmdBasePB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CUserCmdBasePB> _parser = new pb::MessageParser<CUserCmdBasePB>(() => new CUserCmdBasePB());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CUserCmdBasePB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UsercmdReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CUserCmdBasePB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CUserCmdBasePB(CUserCmdBasePB other) : this() {
    base_ = other.base_ != null ? other.base_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CUserCmdBasePB Clone() {
    return new CUserCmdBasePB(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CBaseUserCmdPB base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CBaseUserCmdPB Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CUserCmdBasePB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CUserCmdBasePB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CUserCmdBasePB other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CBaseUserCmdPB();
      }
      Base.MergeFrom(other.Base);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CBaseUserCmdPB();
          }
          input.ReadMessage(Base);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CBaseUserCmdPB();
          }
          input.ReadMessage(Base);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
