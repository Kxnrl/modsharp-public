// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cs_usercmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from cs_usercmd.proto</summary>
public static partial class CsUsercmdReflection {

  #region Descriptor
  /// <summary>File descriptor for cs_usercmd.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CsUsercmdReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBjc191c2VyY21kLnByb3RvGhZuZXR3b3JrYmFzZXR5cGVzLnByb3RvGg11",
          "c2VyY21kLnByb3RvIlYKF0NTR09JbnRlcnBvbGF0aW9uSW5mb1BCEhQKCHNy",
          "Y190aWNrGAEgASgFOgItMRIUCghkc3RfdGljaxgCIAEoBToCLTESDwoEZnJh",
          "YxgDIAEoAjoBMCItChpDU0dPSW50ZXJwb2xhdGlvbkluZm9QQl9DTBIPCgRm",
          "cmFjGAMgASgCOgEwIsUEChdDU0dPSW5wdXRIaXN0b3J5RW50cnlQQhIgCgt2",
          "aWV3X2FuZ2xlcxgCIAEoCzILLkNNc2dRQW5nbGUSGQoRcmVuZGVyX3RpY2tf",
          "Y291bnQYBCABKAUSHAoUcmVuZGVyX3RpY2tfZnJhY3Rpb24YBSABKAISGQoR",
          "cGxheWVyX3RpY2tfY291bnQYBiABKAUSHAoUcGxheWVyX3RpY2tfZnJhY3Rp",
          "b24YByABKAISLgoJY2xfaW50ZXJwGAwgASgLMhsuQ1NHT0ludGVycG9sYXRp",
          "b25JbmZvUEJfQ0wSLAoKc3ZfaW50ZXJwMBgNIAEoCzIYLkNTR09JbnRlcnBv",
          "bGF0aW9uSW5mb1BCEiwKCnN2X2ludGVycDEYDiABKAsyGC5DU0dPSW50ZXJw",
          "b2xhdGlvbkluZm9QQhIvCg1wbGF5ZXJfaW50ZXJwGA8gASgLMhguQ1NHT0lu",
          "dGVycG9sYXRpb25JbmZvUEISFAoMZnJhbWVfbnVtYmVyGEAgASgFEhwKEHRh",
          "cmdldF9lbnRfaW5kZXgYQSABKAU6Ai0xEiMKDnNob290X3Bvc2l0aW9uGEIg",
          "ASgLMgsuQ01zZ1ZlY3RvchIqChV0YXJnZXRfaGVhZF9wb3NfY2hlY2sYQyAB",
          "KAsyCy5DTXNnVmVjdG9yEikKFHRhcmdldF9hYnNfcG9zX2NoZWNrGEQgASgL",
          "MgsuQ01zZ1ZlY3RvchIpChR0YXJnZXRfYWJzX2FuZ19jaGVjaxhFIAEoCzIL",
          "LkNNc2dRQW5nbGUi1QIKDUNTR09Vc2VyQ21kUEISHQoEYmFzZRgBIAEoCzIP",
          "LkNCYXNlVXNlckNtZFBCEi8KDWlucHV0X2hpc3RvcnkYAiADKAsyGC5DU0dP",
          "SW5wdXRIaXN0b3J5RW50cnlQQhInChthdHRhY2sxX3N0YXJ0X2hpc3Rvcnlf",
          "aW5kZXgYBiABKAU6Ai0xEicKG2F0dGFjazJfc3RhcnRfaGlzdG9yeV9pbmRl",
          "eBgHIAEoBToCLTESIAoRbGVmdF9oYW5kX2Rlc2lyZWQYCSABKAg6BWZhbHNl",
          "EikKGmlzX3ByZWRpY3RpbmdfYm9keV9zaG90X2Z4GAsgASgIOgVmYWxzZRIp",
          "Chppc19wcmVkaWN0aW5nX2hlYWRfc2hvdF9meBgMIAEoCDoFZmFsc2USKgob",
          "aXNfcHJlZGljdGluZ19raWxsX3JhZ2RvbGxzGA0gASgIOgVmYWxzZQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::NetworkbasetypesReflection.Descriptor, global::UsercmdReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGOInterpolationInfoPB), global::CSGOInterpolationInfoPB.Parser, new[]{ "SrcTick", "DstTick", "Frac" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGOInterpolationInfoPB_CL), global::CSGOInterpolationInfoPB_CL.Parser, new[]{ "Frac" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGOInputHistoryEntryPB), global::CSGOInputHistoryEntryPB.Parser, new[]{ "ViewAngles", "RenderTickCount", "RenderTickFraction", "PlayerTickCount", "PlayerTickFraction", "ClInterp", "SvInterp0", "SvInterp1", "PlayerInterp", "FrameNumber", "TargetEntIndex", "ShootPosition", "TargetHeadPosCheck", "TargetAbsPosCheck", "TargetAbsAngCheck" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGOUserCmdPB), global::CSGOUserCmdPB.Parser, new[]{ "Base", "InputHistory", "Attack1StartHistoryIndex", "Attack2StartHistoryIndex", "LeftHandDesired", "IsPredictingBodyShotFx", "IsPredictingHeadShotFx", "IsPredictingKillRagdolls" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CSGOInterpolationInfoPB : pb::IMessage<CSGOInterpolationInfoPB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CSGOInterpolationInfoPB> _parser = new pb::MessageParser<CSGOInterpolationInfoPB>(() => new CSGOInterpolationInfoPB());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CSGOInterpolationInfoPB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CsUsercmdReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB(CSGOInterpolationInfoPB other) : this() {
    _hasBits0 = other._hasBits0;
    srcTick_ = other.srcTick_;
    dstTick_ = other.dstTick_;
    frac_ = other.frac_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB Clone() {
    return new CSGOInterpolationInfoPB(this);
  }

  /// <summary>Field number for the "src_tick" field.</summary>
  public const int SrcTickFieldNumber = 1;
  private readonly static int SrcTickDefaultValue = -1;

  private int srcTick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SrcTick {
    get { if ((_hasBits0 & 1) != 0) { return srcTick_; } else { return SrcTickDefaultValue; } }
    set {
      _hasBits0 |= 1;
      srcTick_ = value;
    }
  }
  /// <summary>Gets whether the "src_tick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSrcTick {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "src_tick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSrcTick() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "dst_tick" field.</summary>
  public const int DstTickFieldNumber = 2;
  private readonly static int DstTickDefaultValue = -1;

  private int dstTick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DstTick {
    get { if ((_hasBits0 & 2) != 0) { return dstTick_; } else { return DstTickDefaultValue; } }
    set {
      _hasBits0 |= 2;
      dstTick_ = value;
    }
  }
  /// <summary>Gets whether the "dst_tick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDstTick {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "dst_tick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDstTick() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "frac" field.</summary>
  public const int FracFieldNumber = 3;
  private readonly static float FracDefaultValue = 0F;

  private float frac_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Frac {
    get { if ((_hasBits0 & 4) != 0) { return frac_; } else { return FracDefaultValue; } }
    set {
      _hasBits0 |= 4;
      frac_ = value;
    }
  }
  /// <summary>Gets whether the "frac" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFrac {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "frac" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFrac() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CSGOInterpolationInfoPB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CSGOInterpolationInfoPB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SrcTick != other.SrcTick) return false;
    if (DstTick != other.DstTick) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frac, other.Frac)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSrcTick) hash ^= SrcTick.GetHashCode();
    if (HasDstTick) hash ^= DstTick.GetHashCode();
    if (HasFrac) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frac);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSrcTick) {
      output.WriteRawTag(8);
      output.WriteInt32(SrcTick);
    }
    if (HasDstTick) {
      output.WriteRawTag(16);
      output.WriteInt32(DstTick);
    }
    if (HasFrac) {
      output.WriteRawTag(29);
      output.WriteFloat(Frac);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSrcTick) {
      output.WriteRawTag(8);
      output.WriteInt32(SrcTick);
    }
    if (HasDstTick) {
      output.WriteRawTag(16);
      output.WriteInt32(DstTick);
    }
    if (HasFrac) {
      output.WriteRawTag(29);
      output.WriteFloat(Frac);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSrcTick) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcTick);
    }
    if (HasDstTick) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstTick);
    }
    if (HasFrac) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CSGOInterpolationInfoPB other) {
    if (other == null) {
      return;
    }
    if (other.HasSrcTick) {
      SrcTick = other.SrcTick;
    }
    if (other.HasDstTick) {
      DstTick = other.DstTick;
    }
    if (other.HasFrac) {
      Frac = other.Frac;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SrcTick = input.ReadInt32();
          break;
        }
        case 16: {
          DstTick = input.ReadInt32();
          break;
        }
        case 29: {
          Frac = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SrcTick = input.ReadInt32();
          break;
        }
        case 16: {
          DstTick = input.ReadInt32();
          break;
        }
        case 29: {
          Frac = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CSGOInterpolationInfoPB_CL : pb::IMessage<CSGOInterpolationInfoPB_CL>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CSGOInterpolationInfoPB_CL> _parser = new pb::MessageParser<CSGOInterpolationInfoPB_CL>(() => new CSGOInterpolationInfoPB_CL());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CSGOInterpolationInfoPB_CL> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CsUsercmdReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB_CL() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB_CL(CSGOInterpolationInfoPB_CL other) : this() {
    _hasBits0 = other._hasBits0;
    frac_ = other.frac_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInterpolationInfoPB_CL Clone() {
    return new CSGOInterpolationInfoPB_CL(this);
  }

  /// <summary>Field number for the "frac" field.</summary>
  public const int FracFieldNumber = 3;
  private readonly static float FracDefaultValue = 0F;

  private float frac_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Frac {
    get { if ((_hasBits0 & 1) != 0) { return frac_; } else { return FracDefaultValue; } }
    set {
      _hasBits0 |= 1;
      frac_ = value;
    }
  }
  /// <summary>Gets whether the "frac" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFrac {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "frac" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFrac() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CSGOInterpolationInfoPB_CL);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CSGOInterpolationInfoPB_CL other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frac, other.Frac)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFrac) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frac);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasFrac) {
      output.WriteRawTag(29);
      output.WriteFloat(Frac);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasFrac) {
      output.WriteRawTag(29);
      output.WriteFloat(Frac);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasFrac) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CSGOInterpolationInfoPB_CL other) {
    if (other == null) {
      return;
    }
    if (other.HasFrac) {
      Frac = other.Frac;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 29: {
          Frac = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 29: {
          Frac = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CSGOInputHistoryEntryPB : pb::IMessage<CSGOInputHistoryEntryPB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CSGOInputHistoryEntryPB> _parser = new pb::MessageParser<CSGOInputHistoryEntryPB>(() => new CSGOInputHistoryEntryPB());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CSGOInputHistoryEntryPB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CsUsercmdReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInputHistoryEntryPB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInputHistoryEntryPB(CSGOInputHistoryEntryPB other) : this() {
    _hasBits0 = other._hasBits0;
    viewAngles_ = other.viewAngles_ != null ? other.viewAngles_.Clone() : null;
    renderTickCount_ = other.renderTickCount_;
    renderTickFraction_ = other.renderTickFraction_;
    playerTickCount_ = other.playerTickCount_;
    playerTickFraction_ = other.playerTickFraction_;
    clInterp_ = other.clInterp_ != null ? other.clInterp_.Clone() : null;
    svInterp0_ = other.svInterp0_ != null ? other.svInterp0_.Clone() : null;
    svInterp1_ = other.svInterp1_ != null ? other.svInterp1_.Clone() : null;
    playerInterp_ = other.playerInterp_ != null ? other.playerInterp_.Clone() : null;
    frameNumber_ = other.frameNumber_;
    targetEntIndex_ = other.targetEntIndex_;
    shootPosition_ = other.shootPosition_ != null ? other.shootPosition_.Clone() : null;
    targetHeadPosCheck_ = other.targetHeadPosCheck_ != null ? other.targetHeadPosCheck_.Clone() : null;
    targetAbsPosCheck_ = other.targetAbsPosCheck_ != null ? other.targetAbsPosCheck_.Clone() : null;
    targetAbsAngCheck_ = other.targetAbsAngCheck_ != null ? other.targetAbsAngCheck_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOInputHistoryEntryPB Clone() {
    return new CSGOInputHistoryEntryPB(this);
  }

  /// <summary>Field number for the "view_angles" field.</summary>
  public const int ViewAnglesFieldNumber = 2;
  private global::CMsgQAngle viewAngles_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgQAngle ViewAngles {
    get { return viewAngles_; }
    set {
      viewAngles_ = value;
    }
  }

  /// <summary>Field number for the "render_tick_count" field.</summary>
  public const int RenderTickCountFieldNumber = 4;
  private readonly static int RenderTickCountDefaultValue = 0;

  private int renderTickCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RenderTickCount {
    get { if ((_hasBits0 & 1) != 0) { return renderTickCount_; } else { return RenderTickCountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      renderTickCount_ = value;
    }
  }
  /// <summary>Gets whether the "render_tick_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRenderTickCount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "render_tick_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRenderTickCount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "render_tick_fraction" field.</summary>
  public const int RenderTickFractionFieldNumber = 5;
  private readonly static float RenderTickFractionDefaultValue = 0F;

  private float renderTickFraction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float RenderTickFraction {
    get { if ((_hasBits0 & 2) != 0) { return renderTickFraction_; } else { return RenderTickFractionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      renderTickFraction_ = value;
    }
  }
  /// <summary>Gets whether the "render_tick_fraction" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRenderTickFraction {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "render_tick_fraction" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRenderTickFraction() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "player_tick_count" field.</summary>
  public const int PlayerTickCountFieldNumber = 6;
  private readonly static int PlayerTickCountDefaultValue = 0;

  private int playerTickCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PlayerTickCount {
    get { if ((_hasBits0 & 4) != 0) { return playerTickCount_; } else { return PlayerTickCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      playerTickCount_ = value;
    }
  }
  /// <summary>Gets whether the "player_tick_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPlayerTickCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "player_tick_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPlayerTickCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "player_tick_fraction" field.</summary>
  public const int PlayerTickFractionFieldNumber = 7;
  private readonly static float PlayerTickFractionDefaultValue = 0F;

  private float playerTickFraction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PlayerTickFraction {
    get { if ((_hasBits0 & 8) != 0) { return playerTickFraction_; } else { return PlayerTickFractionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      playerTickFraction_ = value;
    }
  }
  /// <summary>Gets whether the "player_tick_fraction" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPlayerTickFraction {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "player_tick_fraction" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPlayerTickFraction() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "cl_interp" field.</summary>
  public const int ClInterpFieldNumber = 12;
  private global::CSGOInterpolationInfoPB_CL clInterp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CSGOInterpolationInfoPB_CL ClInterp {
    get { return clInterp_; }
    set {
      clInterp_ = value;
    }
  }

  /// <summary>Field number for the "sv_interp0" field.</summary>
  public const int SvInterp0FieldNumber = 13;
  private global::CSGOInterpolationInfoPB svInterp0_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CSGOInterpolationInfoPB SvInterp0 {
    get { return svInterp0_; }
    set {
      svInterp0_ = value;
    }
  }

  /// <summary>Field number for the "sv_interp1" field.</summary>
  public const int SvInterp1FieldNumber = 14;
  private global::CSGOInterpolationInfoPB svInterp1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CSGOInterpolationInfoPB SvInterp1 {
    get { return svInterp1_; }
    set {
      svInterp1_ = value;
    }
  }

  /// <summary>Field number for the "player_interp" field.</summary>
  public const int PlayerInterpFieldNumber = 15;
  private global::CSGOInterpolationInfoPB playerInterp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CSGOInterpolationInfoPB PlayerInterp {
    get { return playerInterp_; }
    set {
      playerInterp_ = value;
    }
  }

  /// <summary>Field number for the "frame_number" field.</summary>
  public const int FrameNumberFieldNumber = 64;
  private readonly static int FrameNumberDefaultValue = 0;

  private int frameNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FrameNumber {
    get { if ((_hasBits0 & 16) != 0) { return frameNumber_; } else { return FrameNumberDefaultValue; } }
    set {
      _hasBits0 |= 16;
      frameNumber_ = value;
    }
  }
  /// <summary>Gets whether the "frame_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFrameNumber {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "frame_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFrameNumber() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "target_ent_index" field.</summary>
  public const int TargetEntIndexFieldNumber = 65;
  private readonly static int TargetEntIndexDefaultValue = -1;

  private int targetEntIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TargetEntIndex {
    get { if ((_hasBits0 & 32) != 0) { return targetEntIndex_; } else { return TargetEntIndexDefaultValue; } }
    set {
      _hasBits0 |= 32;
      targetEntIndex_ = value;
    }
  }
  /// <summary>Gets whether the "target_ent_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTargetEntIndex {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "target_ent_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTargetEntIndex() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "shoot_position" field.</summary>
  public const int ShootPositionFieldNumber = 66;
  private global::CMsgVector shootPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgVector ShootPosition {
    get { return shootPosition_; }
    set {
      shootPosition_ = value;
    }
  }

  /// <summary>Field number for the "target_head_pos_check" field.</summary>
  public const int TargetHeadPosCheckFieldNumber = 67;
  private global::CMsgVector targetHeadPosCheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgVector TargetHeadPosCheck {
    get { return targetHeadPosCheck_; }
    set {
      targetHeadPosCheck_ = value;
    }
  }

  /// <summary>Field number for the "target_abs_pos_check" field.</summary>
  public const int TargetAbsPosCheckFieldNumber = 68;
  private global::CMsgVector targetAbsPosCheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgVector TargetAbsPosCheck {
    get { return targetAbsPosCheck_; }
    set {
      targetAbsPosCheck_ = value;
    }
  }

  /// <summary>Field number for the "target_abs_ang_check" field.</summary>
  public const int TargetAbsAngCheckFieldNumber = 69;
  private global::CMsgQAngle targetAbsAngCheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CMsgQAngle TargetAbsAngCheck {
    get { return targetAbsAngCheck_; }
    set {
      targetAbsAngCheck_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CSGOInputHistoryEntryPB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CSGOInputHistoryEntryPB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ViewAngles, other.ViewAngles)) return false;
    if (RenderTickCount != other.RenderTickCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RenderTickFraction, other.RenderTickFraction)) return false;
    if (PlayerTickCount != other.PlayerTickCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerTickFraction, other.PlayerTickFraction)) return false;
    if (!object.Equals(ClInterp, other.ClInterp)) return false;
    if (!object.Equals(SvInterp0, other.SvInterp0)) return false;
    if (!object.Equals(SvInterp1, other.SvInterp1)) return false;
    if (!object.Equals(PlayerInterp, other.PlayerInterp)) return false;
    if (FrameNumber != other.FrameNumber) return false;
    if (TargetEntIndex != other.TargetEntIndex) return false;
    if (!object.Equals(ShootPosition, other.ShootPosition)) return false;
    if (!object.Equals(TargetHeadPosCheck, other.TargetHeadPosCheck)) return false;
    if (!object.Equals(TargetAbsPosCheck, other.TargetAbsPosCheck)) return false;
    if (!object.Equals(TargetAbsAngCheck, other.TargetAbsAngCheck)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (viewAngles_ != null) hash ^= ViewAngles.GetHashCode();
    if (HasRenderTickCount) hash ^= RenderTickCount.GetHashCode();
    if (HasRenderTickFraction) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RenderTickFraction);
    if (HasPlayerTickCount) hash ^= PlayerTickCount.GetHashCode();
    if (HasPlayerTickFraction) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerTickFraction);
    if (clInterp_ != null) hash ^= ClInterp.GetHashCode();
    if (svInterp0_ != null) hash ^= SvInterp0.GetHashCode();
    if (svInterp1_ != null) hash ^= SvInterp1.GetHashCode();
    if (playerInterp_ != null) hash ^= PlayerInterp.GetHashCode();
    if (HasFrameNumber) hash ^= FrameNumber.GetHashCode();
    if (HasTargetEntIndex) hash ^= TargetEntIndex.GetHashCode();
    if (shootPosition_ != null) hash ^= ShootPosition.GetHashCode();
    if (targetHeadPosCheck_ != null) hash ^= TargetHeadPosCheck.GetHashCode();
    if (targetAbsPosCheck_ != null) hash ^= TargetAbsPosCheck.GetHashCode();
    if (targetAbsAngCheck_ != null) hash ^= TargetAbsAngCheck.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (viewAngles_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ViewAngles);
    }
    if (HasRenderTickCount) {
      output.WriteRawTag(32);
      output.WriteInt32(RenderTickCount);
    }
    if (HasRenderTickFraction) {
      output.WriteRawTag(45);
      output.WriteFloat(RenderTickFraction);
    }
    if (HasPlayerTickCount) {
      output.WriteRawTag(48);
      output.WriteInt32(PlayerTickCount);
    }
    if (HasPlayerTickFraction) {
      output.WriteRawTag(61);
      output.WriteFloat(PlayerTickFraction);
    }
    if (clInterp_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(ClInterp);
    }
    if (svInterp0_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(SvInterp0);
    }
    if (svInterp1_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(SvInterp1);
    }
    if (playerInterp_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(PlayerInterp);
    }
    if (HasFrameNumber) {
      output.WriteRawTag(128, 4);
      output.WriteInt32(FrameNumber);
    }
    if (HasTargetEntIndex) {
      output.WriteRawTag(136, 4);
      output.WriteInt32(TargetEntIndex);
    }
    if (shootPosition_ != null) {
      output.WriteRawTag(146, 4);
      output.WriteMessage(ShootPosition);
    }
    if (targetHeadPosCheck_ != null) {
      output.WriteRawTag(154, 4);
      output.WriteMessage(TargetHeadPosCheck);
    }
    if (targetAbsPosCheck_ != null) {
      output.WriteRawTag(162, 4);
      output.WriteMessage(TargetAbsPosCheck);
    }
    if (targetAbsAngCheck_ != null) {
      output.WriteRawTag(170, 4);
      output.WriteMessage(TargetAbsAngCheck);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (viewAngles_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ViewAngles);
    }
    if (HasRenderTickCount) {
      output.WriteRawTag(32);
      output.WriteInt32(RenderTickCount);
    }
    if (HasRenderTickFraction) {
      output.WriteRawTag(45);
      output.WriteFloat(RenderTickFraction);
    }
    if (HasPlayerTickCount) {
      output.WriteRawTag(48);
      output.WriteInt32(PlayerTickCount);
    }
    if (HasPlayerTickFraction) {
      output.WriteRawTag(61);
      output.WriteFloat(PlayerTickFraction);
    }
    if (clInterp_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(ClInterp);
    }
    if (svInterp0_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(SvInterp0);
    }
    if (svInterp1_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(SvInterp1);
    }
    if (playerInterp_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(PlayerInterp);
    }
    if (HasFrameNumber) {
      output.WriteRawTag(128, 4);
      output.WriteInt32(FrameNumber);
    }
    if (HasTargetEntIndex) {
      output.WriteRawTag(136, 4);
      output.WriteInt32(TargetEntIndex);
    }
    if (shootPosition_ != null) {
      output.WriteRawTag(146, 4);
      output.WriteMessage(ShootPosition);
    }
    if (targetHeadPosCheck_ != null) {
      output.WriteRawTag(154, 4);
      output.WriteMessage(TargetHeadPosCheck);
    }
    if (targetAbsPosCheck_ != null) {
      output.WriteRawTag(162, 4);
      output.WriteMessage(TargetAbsPosCheck);
    }
    if (targetAbsAngCheck_ != null) {
      output.WriteRawTag(170, 4);
      output.WriteMessage(TargetAbsAngCheck);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (viewAngles_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewAngles);
    }
    if (HasRenderTickCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderTickCount);
    }
    if (HasRenderTickFraction) {
      size += 1 + 4;
    }
    if (HasPlayerTickCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerTickCount);
    }
    if (HasPlayerTickFraction) {
      size += 1 + 4;
    }
    if (clInterp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClInterp);
    }
    if (svInterp0_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SvInterp0);
    }
    if (svInterp1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SvInterp1);
    }
    if (playerInterp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInterp);
    }
    if (HasFrameNumber) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
    }
    if (HasTargetEntIndex) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetEntIndex);
    }
    if (shootPosition_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShootPosition);
    }
    if (targetHeadPosCheck_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetHeadPosCheck);
    }
    if (targetAbsPosCheck_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetAbsPosCheck);
    }
    if (targetAbsAngCheck_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetAbsAngCheck);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CSGOInputHistoryEntryPB other) {
    if (other == null) {
      return;
    }
    if (other.viewAngles_ != null) {
      if (viewAngles_ == null) {
        ViewAngles = new global::CMsgQAngle();
      }
      ViewAngles.MergeFrom(other.ViewAngles);
    }
    if (other.HasRenderTickCount) {
      RenderTickCount = other.RenderTickCount;
    }
    if (other.HasRenderTickFraction) {
      RenderTickFraction = other.RenderTickFraction;
    }
    if (other.HasPlayerTickCount) {
      PlayerTickCount = other.PlayerTickCount;
    }
    if (other.HasPlayerTickFraction) {
      PlayerTickFraction = other.PlayerTickFraction;
    }
    if (other.clInterp_ != null) {
      if (clInterp_ == null) {
        ClInterp = new global::CSGOInterpolationInfoPB_CL();
      }
      ClInterp.MergeFrom(other.ClInterp);
    }
    if (other.svInterp0_ != null) {
      if (svInterp0_ == null) {
        SvInterp0 = new global::CSGOInterpolationInfoPB();
      }
      SvInterp0.MergeFrom(other.SvInterp0);
    }
    if (other.svInterp1_ != null) {
      if (svInterp1_ == null) {
        SvInterp1 = new global::CSGOInterpolationInfoPB();
      }
      SvInterp1.MergeFrom(other.SvInterp1);
    }
    if (other.playerInterp_ != null) {
      if (playerInterp_ == null) {
        PlayerInterp = new global::CSGOInterpolationInfoPB();
      }
      PlayerInterp.MergeFrom(other.PlayerInterp);
    }
    if (other.HasFrameNumber) {
      FrameNumber = other.FrameNumber;
    }
    if (other.HasTargetEntIndex) {
      TargetEntIndex = other.TargetEntIndex;
    }
    if (other.shootPosition_ != null) {
      if (shootPosition_ == null) {
        ShootPosition = new global::CMsgVector();
      }
      ShootPosition.MergeFrom(other.ShootPosition);
    }
    if (other.targetHeadPosCheck_ != null) {
      if (targetHeadPosCheck_ == null) {
        TargetHeadPosCheck = new global::CMsgVector();
      }
      TargetHeadPosCheck.MergeFrom(other.TargetHeadPosCheck);
    }
    if (other.targetAbsPosCheck_ != null) {
      if (targetAbsPosCheck_ == null) {
        TargetAbsPosCheck = new global::CMsgVector();
      }
      TargetAbsPosCheck.MergeFrom(other.TargetAbsPosCheck);
    }
    if (other.targetAbsAngCheck_ != null) {
      if (targetAbsAngCheck_ == null) {
        TargetAbsAngCheck = new global::CMsgQAngle();
      }
      TargetAbsAngCheck.MergeFrom(other.TargetAbsAngCheck);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          if (viewAngles_ == null) {
            ViewAngles = new global::CMsgQAngle();
          }
          input.ReadMessage(ViewAngles);
          break;
        }
        case 32: {
          RenderTickCount = input.ReadInt32();
          break;
        }
        case 45: {
          RenderTickFraction = input.ReadFloat();
          break;
        }
        case 48: {
          PlayerTickCount = input.ReadInt32();
          break;
        }
        case 61: {
          PlayerTickFraction = input.ReadFloat();
          break;
        }
        case 98: {
          if (clInterp_ == null) {
            ClInterp = new global::CSGOInterpolationInfoPB_CL();
          }
          input.ReadMessage(ClInterp);
          break;
        }
        case 106: {
          if (svInterp0_ == null) {
            SvInterp0 = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(SvInterp0);
          break;
        }
        case 114: {
          if (svInterp1_ == null) {
            SvInterp1 = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(SvInterp1);
          break;
        }
        case 122: {
          if (playerInterp_ == null) {
            PlayerInterp = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(PlayerInterp);
          break;
        }
        case 512: {
          FrameNumber = input.ReadInt32();
          break;
        }
        case 520: {
          TargetEntIndex = input.ReadInt32();
          break;
        }
        case 530: {
          if (shootPosition_ == null) {
            ShootPosition = new global::CMsgVector();
          }
          input.ReadMessage(ShootPosition);
          break;
        }
        case 538: {
          if (targetHeadPosCheck_ == null) {
            TargetHeadPosCheck = new global::CMsgVector();
          }
          input.ReadMessage(TargetHeadPosCheck);
          break;
        }
        case 546: {
          if (targetAbsPosCheck_ == null) {
            TargetAbsPosCheck = new global::CMsgVector();
          }
          input.ReadMessage(TargetAbsPosCheck);
          break;
        }
        case 554: {
          if (targetAbsAngCheck_ == null) {
            TargetAbsAngCheck = new global::CMsgQAngle();
          }
          input.ReadMessage(TargetAbsAngCheck);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 18: {
          if (viewAngles_ == null) {
            ViewAngles = new global::CMsgQAngle();
          }
          input.ReadMessage(ViewAngles);
          break;
        }
        case 32: {
          RenderTickCount = input.ReadInt32();
          break;
        }
        case 45: {
          RenderTickFraction = input.ReadFloat();
          break;
        }
        case 48: {
          PlayerTickCount = input.ReadInt32();
          break;
        }
        case 61: {
          PlayerTickFraction = input.ReadFloat();
          break;
        }
        case 98: {
          if (clInterp_ == null) {
            ClInterp = new global::CSGOInterpolationInfoPB_CL();
          }
          input.ReadMessage(ClInterp);
          break;
        }
        case 106: {
          if (svInterp0_ == null) {
            SvInterp0 = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(SvInterp0);
          break;
        }
        case 114: {
          if (svInterp1_ == null) {
            SvInterp1 = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(SvInterp1);
          break;
        }
        case 122: {
          if (playerInterp_ == null) {
            PlayerInterp = new global::CSGOInterpolationInfoPB();
          }
          input.ReadMessage(PlayerInterp);
          break;
        }
        case 512: {
          FrameNumber = input.ReadInt32();
          break;
        }
        case 520: {
          TargetEntIndex = input.ReadInt32();
          break;
        }
        case 530: {
          if (shootPosition_ == null) {
            ShootPosition = new global::CMsgVector();
          }
          input.ReadMessage(ShootPosition);
          break;
        }
        case 538: {
          if (targetHeadPosCheck_ == null) {
            TargetHeadPosCheck = new global::CMsgVector();
          }
          input.ReadMessage(TargetHeadPosCheck);
          break;
        }
        case 546: {
          if (targetAbsPosCheck_ == null) {
            TargetAbsPosCheck = new global::CMsgVector();
          }
          input.ReadMessage(TargetAbsPosCheck);
          break;
        }
        case 554: {
          if (targetAbsAngCheck_ == null) {
            TargetAbsAngCheck = new global::CMsgQAngle();
          }
          input.ReadMessage(TargetAbsAngCheck);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CSGOUserCmdPB : pb::IMessage<CSGOUserCmdPB>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CSGOUserCmdPB> _parser = new pb::MessageParser<CSGOUserCmdPB>(() => new CSGOUserCmdPB());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CSGOUserCmdPB> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CsUsercmdReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOUserCmdPB() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOUserCmdPB(CSGOUserCmdPB other) : this() {
    _hasBits0 = other._hasBits0;
    base_ = other.base_ != null ? other.base_.Clone() : null;
    inputHistory_ = other.inputHistory_.Clone();
    attack1StartHistoryIndex_ = other.attack1StartHistoryIndex_;
    attack2StartHistoryIndex_ = other.attack2StartHistoryIndex_;
    leftHandDesired_ = other.leftHandDesired_;
    isPredictingBodyShotFx_ = other.isPredictingBodyShotFx_;
    isPredictingHeadShotFx_ = other.isPredictingHeadShotFx_;
    isPredictingKillRagdolls_ = other.isPredictingKillRagdolls_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CSGOUserCmdPB Clone() {
    return new CSGOUserCmdPB(this);
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 1;
  private global::CBaseUserCmdPB base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CBaseUserCmdPB Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "input_history" field.</summary>
  public const int InputHistoryFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CSGOInputHistoryEntryPB> _repeated_inputHistory_codec
      = pb::FieldCodec.ForMessage(18, global::CSGOInputHistoryEntryPB.Parser);
  private readonly pbc::RepeatedField<global::CSGOInputHistoryEntryPB> inputHistory_ = new pbc::RepeatedField<global::CSGOInputHistoryEntryPB>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::CSGOInputHistoryEntryPB> InputHistory {
    get { return inputHistory_; }
  }

  /// <summary>Field number for the "attack1_start_history_index" field.</summary>
  public const int Attack1StartHistoryIndexFieldNumber = 6;
  private readonly static int Attack1StartHistoryIndexDefaultValue = -1;

  private int attack1StartHistoryIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Attack1StartHistoryIndex {
    get { if ((_hasBits0 & 1) != 0) { return attack1StartHistoryIndex_; } else { return Attack1StartHistoryIndexDefaultValue; } }
    set {
      _hasBits0 |= 1;
      attack1StartHistoryIndex_ = value;
    }
  }
  /// <summary>Gets whether the "attack1_start_history_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAttack1StartHistoryIndex {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "attack1_start_history_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAttack1StartHistoryIndex() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "attack2_start_history_index" field.</summary>
  public const int Attack2StartHistoryIndexFieldNumber = 7;
  private readonly static int Attack2StartHistoryIndexDefaultValue = -1;

  private int attack2StartHistoryIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Attack2StartHistoryIndex {
    get { if ((_hasBits0 & 2) != 0) { return attack2StartHistoryIndex_; } else { return Attack2StartHistoryIndexDefaultValue; } }
    set {
      _hasBits0 |= 2;
      attack2StartHistoryIndex_ = value;
    }
  }
  /// <summary>Gets whether the "attack2_start_history_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAttack2StartHistoryIndex {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "attack2_start_history_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAttack2StartHistoryIndex() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "left_hand_desired" field.</summary>
  public const int LeftHandDesiredFieldNumber = 9;
  private readonly static bool LeftHandDesiredDefaultValue = false;

  private bool leftHandDesired_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LeftHandDesired {
    get { if ((_hasBits0 & 4) != 0) { return leftHandDesired_; } else { return LeftHandDesiredDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leftHandDesired_ = value;
    }
  }
  /// <summary>Gets whether the "left_hand_desired" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeftHandDesired {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "left_hand_desired" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeftHandDesired() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "is_predicting_body_shot_fx" field.</summary>
  public const int IsPredictingBodyShotFxFieldNumber = 11;
  private readonly static bool IsPredictingBodyShotFxDefaultValue = false;

  private bool isPredictingBodyShotFx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsPredictingBodyShotFx {
    get { if ((_hasBits0 & 8) != 0) { return isPredictingBodyShotFx_; } else { return IsPredictingBodyShotFxDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isPredictingBodyShotFx_ = value;
    }
  }
  /// <summary>Gets whether the "is_predicting_body_shot_fx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsPredictingBodyShotFx {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "is_predicting_body_shot_fx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsPredictingBodyShotFx() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "is_predicting_head_shot_fx" field.</summary>
  public const int IsPredictingHeadShotFxFieldNumber = 12;
  private readonly static bool IsPredictingHeadShotFxDefaultValue = false;

  private bool isPredictingHeadShotFx_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsPredictingHeadShotFx {
    get { if ((_hasBits0 & 16) != 0) { return isPredictingHeadShotFx_; } else { return IsPredictingHeadShotFxDefaultValue; } }
    set {
      _hasBits0 |= 16;
      isPredictingHeadShotFx_ = value;
    }
  }
  /// <summary>Gets whether the "is_predicting_head_shot_fx" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsPredictingHeadShotFx {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "is_predicting_head_shot_fx" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsPredictingHeadShotFx() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "is_predicting_kill_ragdolls" field.</summary>
  public const int IsPredictingKillRagdollsFieldNumber = 13;
  private readonly static bool IsPredictingKillRagdollsDefaultValue = false;

  private bool isPredictingKillRagdolls_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsPredictingKillRagdolls {
    get { if ((_hasBits0 & 32) != 0) { return isPredictingKillRagdolls_; } else { return IsPredictingKillRagdollsDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isPredictingKillRagdolls_ = value;
    }
  }
  /// <summary>Gets whether the "is_predicting_kill_ragdolls" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsPredictingKillRagdolls {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "is_predicting_kill_ragdolls" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsPredictingKillRagdolls() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CSGOUserCmdPB);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CSGOUserCmdPB other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Base, other.Base)) return false;
    if(!inputHistory_.Equals(other.inputHistory_)) return false;
    if (Attack1StartHistoryIndex != other.Attack1StartHistoryIndex) return false;
    if (Attack2StartHistoryIndex != other.Attack2StartHistoryIndex) return false;
    if (LeftHandDesired != other.LeftHandDesired) return false;
    if (IsPredictingBodyShotFx != other.IsPredictingBodyShotFx) return false;
    if (IsPredictingHeadShotFx != other.IsPredictingHeadShotFx) return false;
    if (IsPredictingKillRagdolls != other.IsPredictingKillRagdolls) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (base_ != null) hash ^= Base.GetHashCode();
    hash ^= inputHistory_.GetHashCode();
    if (HasAttack1StartHistoryIndex) hash ^= Attack1StartHistoryIndex.GetHashCode();
    if (HasAttack2StartHistoryIndex) hash ^= Attack2StartHistoryIndex.GetHashCode();
    if (HasLeftHandDesired) hash ^= LeftHandDesired.GetHashCode();
    if (HasIsPredictingBodyShotFx) hash ^= IsPredictingBodyShotFx.GetHashCode();
    if (HasIsPredictingHeadShotFx) hash ^= IsPredictingHeadShotFx.GetHashCode();
    if (HasIsPredictingKillRagdolls) hash ^= IsPredictingKillRagdolls.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    inputHistory_.WriteTo(output, _repeated_inputHistory_codec);
    if (HasAttack1StartHistoryIndex) {
      output.WriteRawTag(48);
      output.WriteInt32(Attack1StartHistoryIndex);
    }
    if (HasAttack2StartHistoryIndex) {
      output.WriteRawTag(56);
      output.WriteInt32(Attack2StartHistoryIndex);
    }
    if (HasLeftHandDesired) {
      output.WriteRawTag(72);
      output.WriteBool(LeftHandDesired);
    }
    if (HasIsPredictingBodyShotFx) {
      output.WriteRawTag(88);
      output.WriteBool(IsPredictingBodyShotFx);
    }
    if (HasIsPredictingHeadShotFx) {
      output.WriteRawTag(96);
      output.WriteBool(IsPredictingHeadShotFx);
    }
    if (HasIsPredictingKillRagdolls) {
      output.WriteRawTag(104);
      output.WriteBool(IsPredictingKillRagdolls);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (base_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Base);
    }
    inputHistory_.WriteTo(ref output, _repeated_inputHistory_codec);
    if (HasAttack1StartHistoryIndex) {
      output.WriteRawTag(48);
      output.WriteInt32(Attack1StartHistoryIndex);
    }
    if (HasAttack2StartHistoryIndex) {
      output.WriteRawTag(56);
      output.WriteInt32(Attack2StartHistoryIndex);
    }
    if (HasLeftHandDesired) {
      output.WriteRawTag(72);
      output.WriteBool(LeftHandDesired);
    }
    if (HasIsPredictingBodyShotFx) {
      output.WriteRawTag(88);
      output.WriteBool(IsPredictingBodyShotFx);
    }
    if (HasIsPredictingHeadShotFx) {
      output.WriteRawTag(96);
      output.WriteBool(IsPredictingHeadShotFx);
    }
    if (HasIsPredictingKillRagdolls) {
      output.WriteRawTag(104);
      output.WriteBool(IsPredictingKillRagdolls);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    size += inputHistory_.CalculateSize(_repeated_inputHistory_codec);
    if (HasAttack1StartHistoryIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack1StartHistoryIndex);
    }
    if (HasAttack2StartHistoryIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack2StartHistoryIndex);
    }
    if (HasLeftHandDesired) {
      size += 1 + 1;
    }
    if (HasIsPredictingBodyShotFx) {
      size += 1 + 1;
    }
    if (HasIsPredictingHeadShotFx) {
      size += 1 + 1;
    }
    if (HasIsPredictingKillRagdolls) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CSGOUserCmdPB other) {
    if (other == null) {
      return;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::CBaseUserCmdPB();
      }
      Base.MergeFrom(other.Base);
    }
    inputHistory_.Add(other.inputHistory_);
    if (other.HasAttack1StartHistoryIndex) {
      Attack1StartHistoryIndex = other.Attack1StartHistoryIndex;
    }
    if (other.HasAttack2StartHistoryIndex) {
      Attack2StartHistoryIndex = other.Attack2StartHistoryIndex;
    }
    if (other.HasLeftHandDesired) {
      LeftHandDesired = other.LeftHandDesired;
    }
    if (other.HasIsPredictingBodyShotFx) {
      IsPredictingBodyShotFx = other.IsPredictingBodyShotFx;
    }
    if (other.HasIsPredictingHeadShotFx) {
      IsPredictingHeadShotFx = other.IsPredictingHeadShotFx;
    }
    if (other.HasIsPredictingKillRagdolls) {
      IsPredictingKillRagdolls = other.IsPredictingKillRagdolls;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CBaseUserCmdPB();
          }
          input.ReadMessage(Base);
          break;
        }
        case 18: {
          inputHistory_.AddEntriesFrom(input, _repeated_inputHistory_codec);
          break;
        }
        case 48: {
          Attack1StartHistoryIndex = input.ReadInt32();
          break;
        }
        case 56: {
          Attack2StartHistoryIndex = input.ReadInt32();
          break;
        }
        case 72: {
          LeftHandDesired = input.ReadBool();
          break;
        }
        case 88: {
          IsPredictingBodyShotFx = input.ReadBool();
          break;
        }
        case 96: {
          IsPredictingHeadShotFx = input.ReadBool();
          break;
        }
        case 104: {
          IsPredictingKillRagdolls = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (base_ == null) {
            Base = new global::CBaseUserCmdPB();
          }
          input.ReadMessage(Base);
          break;
        }
        case 18: {
          inputHistory_.AddEntriesFrom(ref input, _repeated_inputHistory_codec);
          break;
        }
        case 48: {
          Attack1StartHistoryIndex = input.ReadInt32();
          break;
        }
        case 56: {
          Attack2StartHistoryIndex = input.ReadInt32();
          break;
        }
        case 72: {
          LeftHandDesired = input.ReadBool();
          break;
        }
        case 88: {
          IsPredictingBodyShotFx = input.ReadBool();
          break;
        }
        case 96: {
          IsPredictingHeadShotFx = input.ReadBool();
          break;
        }
        case 104: {
          IsPredictingKillRagdolls = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
