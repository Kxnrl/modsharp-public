name: Build & Release

on:
  push:
    paths-ignore:
      - "docfx/**"
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  setup:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      git_commit: ${{ steps.envvars.outputs.GIT_COMMIT }}
      branch: ${{ steps.envvars.outputs.BRANCH }}
      github_sha_short: ${{ steps.envvars.outputs.GITHUB_SHA_SHORT }}
      date: ${{ steps.envvars.outputs.DATE }}
      version: ${{ steps.envvars.outputs.VERSION }}
      version_full: ${{ steps.envvars.outputs.VERSION_FULL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Make Environment Variables
        id: envvars
        run: |
          DATE=$(date +"%Y.%m.%d")
          VERSION_MAJOR=2
          VERSION_MINOR=0
          VERSION_PATCH=0
          VERSION_COMMIT=$(git rev-list --count HEAD)
          echo "DATE=$DATE"
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}"
          echo "GIT_COMMIT=$VERSION_COMMIT"
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT"

          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=$VERSION_COMMIT" >> $GITHUB_OUTPUT
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_OUTPUT
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT" >> $GITHUB_OUTPUT

  build_windows:
    needs: setup
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Create Version Header
        shell: bash
        env:
          GITCOMMIT: ${{ needs.setup.outputs.git_commit }}
          GITDATE: ${{ needs.setup.outputs.date }}
          GITHASH: ${{ needs.setup.outputs.github_sha_short }}
        run: |
          echo "#pragma once" > ./Engine/src/version_auto.h
          echo "#define GIT_VERSION ${{ needs.setup.outputs.git_commit }} " >> ./Engine/src/version_auto.h
          echo "#define GIT_VERSION_STR \"${{ needs.setup.outputs.git_commit }}\" " >> ./Engine/src/version_auto.h
          echo "#define BUILD_DATE \"${{ needs.setup.outputs.date }}\" " >> ./Engine/src/version_auto.h
          echo "#define COMMIT_HASH \"${{ needs.setup.outputs.github_sha_short }}\" " >> ./Engine/src/version_auto.h

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Prepare Build
        shell: bash
        run: |
          mkdir ./build
          mkdir ./build/sharp
          mkdir ./build/sharp/bin
          mkdir ./build/sharp/bin/win64
          mkdir ./build/sharp/core
          mkdir ./build/sharp/configs
          mkdir ./build/sharp/gamedata

      - name: Build Loader
        shell: cmd
        run: |
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          set CURRENT_DIR=%CD%
          msbuild Loader/Loader.vcxproj /p:Configuration=Release /p:Platform=x64 /p:OutDir=%CURRENT_DIR%/build/sharp/bin/win64/ /p:IntermediateOutputPath=./obj/ /p:Optimize=2

      - name: Build Engine
        shell: cmd
        run: |
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          set CURRENT_DIR=%CD%
          msbuild Engine/ModSharp.vcxproj /p:Configuration=Release /p:Platform=x64 /p:OutDir=%CURRENT_DIR%/build/sharp/bin/ /p:IntermediateOutputPath=./obj/ /p:PreBuildEventUseInBuild=false /p:Optimize=2

      - name: Build Sharp.Core
        shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.version_full }}
        run: dotnet publish Sharp.Core/Sharp.Core.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./build/sharp/core -p:Version=$VERSION

      - name: Build Sharp.Extensions
        shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.version_full }}
        run: |
          dotnet publish Sharp.Extensions/GameEventManager/src/Sharp.Extensions.GameEventManager.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.GameEventManager -p:Version=$VERSION
          dotnet publish Sharp.Extensions/EntityHookManager/src/Sharp.Extensions.EntityHookManager.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.EntityHookManager -p:Version=$VERSION

      - name: Copy Assets
        shell: bash
        run: |
          cp -r ./.asset/configs  ./build/sharp
          cp -r ./.asset/gamedata ./build/sharp

      - name: Zip Package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        shell: pwsh
        run: |
          pushd ./build
          Compress-Archive -Path . -DestinationPath ../ModSharp-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.github_sha_short }}.zip
          popd
          pushd ./extensions
          Compress-Archive -Path . -DestinationPath ../ModSharp-${{ needs.setup.outputs.version }}-windows-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          popd

      - name: Upload ModSharp package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        uses: actions/upload-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.github_sha_short }}.zip
          path: ModSharp-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.github_sha_short }}.zip
          if-no-files-found: error
          retention-days: 30

      - name: Upload Extensions package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        uses: actions/upload-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-windows-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          path: ModSharp-${{ needs.setup.outputs.version }}-windows-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          if-no-files-found: error
          retention-days: 30

  build_linux:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
    steps:
      - name: Install Linux packages
        run: |
          sudo apt update
          sudo apt install -yq --no-install-recommends g++-multilib build-essential

      - name: Use GCC14
        run: |
          PATH="/usr/lib/gcc-14/bin:$PATH"

      - name: Install Clang16
        run: |
          apt update && apt install -y clang-16

      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Mark repository as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Create Version Header
        shell: bash
        env:
          GITCOMMIT: ${{ needs.setup.outputs.git_commit }}
          GITDATE: ${{ needs.setup.outputs.date }}
          GITHASH: ${{ needs.setup.outputs.github_sha_short }}
        run: |
          echo "#pragma once" > ./Engine/src/version_auto.h
          echo "#define GIT_VERSION ${{ needs.setup.outputs.git_commit }} " >> ./Engine/src/version_auto.h
          echo "#define GIT_VERSION_STR \"${{ needs.setup.outputs.git_commit }}\" " >> ./Engine/src/version_auto.h
          echo "#define BUILD_DATE \"${{ needs.setup.outputs.date }}\" " >> ./Engine/src/version_auto.h
          echo "#define COMMIT_HASH \"${{ needs.setup.outputs.github_sha_short }}\" " >> ./Engine/src/version_auto.h

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Prepare Build
        shell: bash
        run: |
          mkdir ./build
          mkdir ./build/sharp
          mkdir ./build/sharp/bin
          mkdir ./build/sharp/bin/linuxsteamrt64
          mkdir ./build/sharp/core
          mkdir ./build/sharp/configs
          mkdir ./build/sharp/gamedata

      - name: Build Loader
        run: |
          cd Loader && cmake -P cmkr.cmake && cmake -B build -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16 -DCMAKE_BUILD_TYPE=Release && cmake --build build -- -j$(nproc)

      - name: Build Engine
        run: |
          cd Engine && cmake -P cmkr.cmake && cmake -B build  -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16 -DCMAKE_BUILD_TYPE=Release && cmake --build build -- -j$(nproc)

      - name: Build Sharp.Core
        shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.version_full }}
        run: dotnet publish Sharp.Core/Sharp.Core.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./build/sharp/core -p:Version=$VERSION

      - name: Build Sharp.Extensions
        shell: bash
        env:
          VERSION: ${{ needs.setup.outputs.version_full }}
        run: |
          dotnet publish Sharp.Extensions/GameEventManager/src/Sharp.Extensions.GameEventManager.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.GameEventManager -p:Version=$VERSION
          dotnet publish Sharp.Extensions/EntityHookManager/src/Sharp.Extensions.EntityHookManager.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.EntityHookManager -p:Version=$VERSION

      - name: Copy Assets
        shell: bash
        run: |
          cp -r ./.asset/configs  ./build/sharp
          cp -r ./.asset/gamedata ./build/sharp
          cp -r ./Engine/build/libmodsharp.so ./build/sharp/bin/libmodsharp.so
          cp -r ./Loader/build/libserver.so ./build/sharp/bin/linuxsteamrt64/libserver.so

      - name: Zip Package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        run: |
          pushd ./build
          zip -qq -r ../ModSharp-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.github_sha_short }}.zip .
          popd
          pushd ./extensions
          zip -qq -r ../ModSharp-${{ needs.setup.outputs.version }}-linux-extensions-${{ needs.setup.outputs.github_sha_short }}.zip .
          popd

      - name: Upload ModSharp package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        uses: actions/upload-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.github_sha_short }}.zip
          path: ModSharp-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.github_sha_short }}.zip
          if-no-files-found: error
          retention-days: 30

      - name: Upload Extensions package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
        uses: actions/upload-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-linux-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          path: ModSharp-${{ needs.setup.outputs.version }}-linux-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          if-no-files-found: error
          retention-days: 30

  upload:
    if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/master' ) }}
    needs: ["setup", "build_windows", "build_linux"]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.github_sha_short }}.zip

      - uses: actions/download-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-windows-extensions-${{ needs.setup.outputs.github_sha_short }}.zip

      - uses: actions/download-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.github_sha_short }}.zip

      - uses: actions/download-artifact@v4
        with:
          name: ModSharp-${{ needs.setup.outputs.version }}-linux-extensions-${{ needs.setup.outputs.github_sha_short }}.zip

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version_full }}
          name: ModSharp v${{ needs.setup.outputs.version_full }}
          files: |
            ModSharp-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.github_sha_short }}.zip
            ModSharp-${{ needs.setup.outputs.version }}-windows-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
            ModSharp-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.github_sha_short }}.zip
            ModSharp-${{ needs.setup.outputs.version }}-linux-extensions-${{ needs.setup.outputs.github_sha_short }}.zip
          generate_release_notes: true
          draft: false
          prerelease: false
