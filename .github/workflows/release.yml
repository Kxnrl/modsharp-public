name: Release

on:
  workflow_dispatch:  

jobs:
  prefetch:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      git_commit: ${{ steps.envvars.outputs.GIT_COMMIT }}
      branch: ${{ steps.envvars.outputs.BRANCH }}
      github_sha_short: ${{ steps.envvars.outputs.GITHUB_SHA_SHORT }}
      date: ${{ steps.envvars.outputs.DATE }}
      version: ${{ steps.envvars.outputs.VERSION }}
      version_full: ${{ steps.envvars.outputs.VERSION_FULL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 99999
      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"
      - name: Make Environment Variables
        id: envvars
        run: |
          DATE=$(date +"%Y.%m.%d")
          VERSION_MAJOR=2
          VERSION_MINOR=0
          VERSION_PATCH=0
          VERSION_COMMIT=$(git rev-list --count HEAD)
          echo "DATE=$DATE"
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}"
          echo "GIT_COMMIT=$VERSION_COMMIT"
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT"
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=$VERSION_COMMIT" >> $GITHUB_OUTPUT
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_OUTPUT
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT" >> $GITHUB_OUTPUT

  windows:
    needs: prefetch
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Versioning
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
          GITDATE: ${{ needs.prefetch.outputs.date }}
          GITHASH: ${{ needs.prefetch.outputs.github_sha_short }}
        run: |
          echo "#pragma once" > ./Engine/src/version_auto.h
          echo "#define GIT_VERSION ${{env.GITCOMMIT}} " >> ./Engine/src/version_auto.h
          echo "#define GIT_VERSION_STR \"${{env.GITCOMMIT}}\" " >> ./Engine/src/version_auto.h
          echo "#define BUILD_DATE \"${{env.GITDATE}}\" " >> ./Engine/src/version_auto.h
          echo "#define COMMIT_HASH \"${{env.GITHASH}}\" " >> ./Engine/src/version_auto.h

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Prepare Build
        shell: bash
        run: |
          mkdir ./build
          mkdir ./build/sharp
          mkdir ./build/sharp/bin
          mkdir ./build/sharp/bin/win64
          mkdir ./build/sharp/core
          mkdir ./build/sharp/configs
          mkdir ./build/sharp/gamedata

      - name: Build Loader
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          set CURRENT_DIR=%CD%
          msbuild Loader/Loader.vcxproj /p:Configuration=Release /p:Platform=x64 /p:OutDir=%CURRENT_DIR%/build/sharp/bin/win64/ /p:IntermediateOutputPath=./obj/ /p:Optimize=2

      - name: Build Engine
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          set CURRENT_DIR=%CD%
          msbuild Engine/ModSharp.vcxproj /p:Configuration=Release /p:Platform=x64 /p:OutDir=%CURRENT_DIR%/build/sharp/bin/ /p:IntermediateOutputPath=./obj/ /p:PreBuildEventUseInBuild=false /p:Optimize=2

      - name: Build Sharp.Core
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: dotnet publish Sharp.Core/Sharp.Core.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./build/sharp/core -p:VersionSuffix=${{env.GITCOMMIT}}

      - name: Build Sharp.Extensions
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: |
          dotnet publish Sharp.Extensions/GameEventManager/src/Sharp.Extensions.GameEventManager.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.GameEventManager -p:VersionSuffix=${{env.GITCOMMIT}}
          dotnet publish Sharp.Extensions/EntityHookManager/src/Sharp.Extensions.EntityHookManager.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.EntityHookManager -p:VersionSuffix=${{env.GITCOMMIT}}

      - name: Copy Assets
        shell: bash
        run: |
          cp -r ./.asset/configs  ./build/sharp
          cp -r ./.asset/gamedata ./build/sharp

      - name: Upload ModSharp artifact
        uses: actions/upload-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-windows
          path: ./build
          if-no-files-found: error
          retention-days: 30

      - name: Upload Extensions artifact
        uses: actions/upload-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-windows-extensions
          path: ./extensions
          if-no-files-found: error
          retention-days: 30

  linux:
    needs: prefetch
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
    steps:
      - name: Install Linux packages
        run: |
          sudo apt update
          sudo apt install -yq --no-install-recommends g++-multilib build-essential

      - name: Use GCC14
        run: |
          PATH="/usr/lib/gcc-14/bin:$PATH"

      - name: Install Clang16
        run: |
          apt update && apt install -y clang-16

      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Mark repository as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Versioning
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
          GITDATE: ${{ needs.prefetch.outputs.date }}
          GITHASH: ${{ needs.prefetch.outputs.github_sha_short }}
        run: |
          echo "#pragma once" > ./Engine/src/version_auto.h
          echo "#define GIT_VERSION ${{env.GITCOMMIT}} " >> ./Engine/src/version_auto.h
          echo "#define GIT_VERSION_STR \"${{env.GITCOMMIT}}\" " >> ./Engine/src/version_auto.h
          echo "#define BUILD_DATE \"${{env.GITDATE}}\" " >> ./Engine/src/version_auto.h
          echo "#define COMMIT_HASH \"${{env.GITHASH}}\" " >> ./Engine/src/version_auto.h

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Prepare Build
        shell: bash
        run: |
          mkdir ./build
          mkdir ./build/sharp
          mkdir ./build/sharp/bin
          mkdir ./build/sharp/bin/linuxsteamrt64
          mkdir ./build/sharp/core
          mkdir ./build/sharp/configs
          mkdir ./build/sharp/gamedata

      - name: Build Loader
        run: |
          cd Loader && cmake -P cmkr.cmake && cmake -B build -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16 -DCMAKE_BUILD_TYPE=Release && cmake --build build -- -j$(nproc)

      - name: Build Engine
        run: |
          cd Engine && cmake -P cmkr.cmake && cmake -B build  -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16 -DCMAKE_BUILD_TYPE=Release && cmake --build build -- -j$(nproc)

      - name: Build Sharp.Core
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: dotnet publish Sharp.Core/Sharp.Core.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./build/sharp/core -p:VersionSuffix=${{env.GITCOMMIT}}

      - name: Build Sharp.Extensions
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: |
          dotnet publish Sharp.Extensions/GameEventManager/src/Sharp.Extensions.GameEventManager.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.GameEventManager -p:VersionSuffix=${{env.GITCOMMIT}}
          dotnet publish Sharp.Extensions/EntityHookManager/src/Sharp.Extensions.EntityHookManager.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./extensions/Sharp.Extensions.EntityHookManager -p:VersionSuffix=${{env.GITCOMMIT}}

      - name: Copy Assets
        shell: bash
        run: |
          cp -r ./.asset/configs  ./build/sharp
          cp -r ./.asset/gamedata ./build/sharp
          cp -r ./Engine/build/libmodsharp.so ./build/sharp/bin/libmodsharp.so
          cp -r ./Loader/build/libserver.so ./build/sharp/bin/linuxsteamrt64/libserver.so

      - name: Upload ModSharp artifact
        uses: actions/upload-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-linux
          path: ./build
          if-no-files-found: error
          retention-days: 30

      - name: Upload Extensions artifact
        uses: actions/upload-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-linux-extensions
          path: ./extensions
          if-no-files-found: error
          retention-days: 30

  nuget:
    needs: prefetch
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Build
        shell: bash
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: |
          dotnet pack Sharp.Shared/Sharp.Shared.csproj --configuration Release --output .build/nuget -p:VersionSuffix=${{env.GITCOMMIT}}
          dotnet pack Sharp.Generator.Sdk/Sharp.Generator.Sdk.csproj --configuration Release --output .build/nuget -p:VersionSuffix=${{env.GITCOMMIT}}
          dotnet pack Sharp.Extensions/GameEventManager/src/Sharp.Extensions.GameEventManager.csproj --configuration Release --output .build/nuget -p:VersionSuffix=${{env.GITCOMMIT}}
          dotnet pack Sharp.Extensions/EntityHookManager/src/Sharp.Extensions.EntityHookManager.csproj --configuration Release --output .build/nuget -p:VersionSuffix=${{env.GITCOMMIT}}

      - name: Publish
        shell: bash
        run: dotnet nuget push .build/nuget/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

  release:
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    needs: [prefetch, windows, linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows
        uses: actions/download-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-windows
          path: ./build/windows

      - name: Download Windows Extensions
        uses: actions/download-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-windows-extensions
          path: ./build/windows-extensions

      - name: Download Linux
        uses: actions/download-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-linux
          path: ./build/linux

      - name: Download Linux Extensions
        uses: actions/download-artifact@v4
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          name: ModSharp-git${{env.GITCOMMIT}}-linux-extensions
          path: ./build/linux-extensions

      - name: Package artifacts
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        run: |
          zip -r ModSharp-git${{env.GITCOMMIT}}-windows.zip build/windows/*
          zip -r ModSharp-git${{env.GITCOMMIT}}-windows-extensions.zip build/windows-extensions/*
          zip -r ModSharp-git${{env.GITCOMMIT}}-linux.zip build/linux/*
          zip -r ModSharp-git${{env.GITCOMMIT}}-linux-extensions.zip build/linux-extensions/*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITCOMMIT: ${{ needs.prefetch.outputs.git_commit }}
        with:
          overwrite_files: true
          prerelease: true
          name: ModSharp-git${{env.GITCOMMIT}}
          tag: ${{env.GITCOMMIT}}
          fail_on_unmatched_files: true
          files: |
            ModSharp-git${{env.GITCOMMIT}}-windows.zip
            ModSharp-git${{env.GITCOMMIT}}-windows-extensions.zip
            ModSharp-git${{env.GITCOMMIT}}-linux.zip
            ModSharp-git${{env.GITCOMMIT}}-linux-extensions.zip
