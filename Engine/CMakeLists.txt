# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Enable support for MSVC_RUNTIME_LIBRARY
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(ModSharp)

# Target: modsharp
set(modsharp_SOURCES
	"vendors/zydis/Zydis.c"
	"vendors/safetyhook/safetyhook.cpp"
	"src/CoreCLR/RuntimeProtobufMessage.cpp"
	"src/CoreCLR/coreclr.cpp"
	"src/address.cpp"
	"src/bridge/adapter.cpp"
	"src/bridge/corebridge.cpp"
	"src/bridge/hookbridge.cpp"
	"src/bridge/natives/ClientNatives.cpp"
	"src/bridge/natives/CoreNatives.cpp"
	"src/bridge/natives/EntityNatives.cpp"
	"src/bridge/natives/GameNatives.cpp"
	"src/bridge/natives/NetNatives.cpp"
	"src/bridge/natives/PlayerNatives.cpp"
	"src/bridge/natives/SoundNatives.cpp"
	"src/command.cpp"
	"src/cstrike/component/CGameSceneNode.cpp"
	"src/cstrike/component/PlayerControllerComponent.cpp"
	"src/cstrike/component/PlayerPawnComponent.cpp"
	"src/cstrike/econitem.cpp"
	"src/cstrike/entity/CBaseEntity.cpp"
	"src/cstrike/entity/CBaseModelEntity.cpp"
	"src/cstrike/entity/CBaseWeapon.cpp"
	"src/cstrike/entity/CTriggerPush.cpp"
	"src/cstrike/entity/PlayerController.cpp"
	"src/cstrike/entity/PlayerPawn.cpp"
	"src/cstrike/interface/CDedicatedServerWorkshopManager.cpp"
	"src/cstrike/interface/CGameEntitySystem.cpp"
	"src/cstrike/interface/ICvar.cpp"
	"src/cstrike/interface/IGameRules.cpp"
	"src/cstrike/interface/IGameServer.cpp"
	"src/cstrike/interface/IGameSpawnGroupMgr.cpp"
	"src/cstrike/interface/IGameSystem.cpp"
	"src/cstrike/interface/IGameTypes.cpp"
	"src/cstrike/interface/INetChannel.cpp"
	"src/cstrike/interface/IResourceSystem.cpp"
	"src/cstrike/interface/ISchemaSystem.cpp"
	"src/cstrike/interface/ISoundOpSystem.cpp"
	"src/cstrike/schema.cpp"
	"src/cstrike/type/CCommand.cpp"
	"src/cstrike/type/CEconItemView.cpp"
	"src/cstrike/type/CEntityInstance.cpp"
	"src/cstrike/type/CEntityKeyValues.cpp"
	"src/cstrike/type/CNetworkGameServer.cpp"
	"src/cstrike/type/CRecipientFilter.cpp"
	"src/cstrike/type/CServerSideClient.cpp"
	"src/cstrike/type/CUtlString.cpp"
	"src/cstrike/type/KeyValues.cpp"
	"src/cstrike/type/KeyValues3.cpp"
	"src/filesystemfix.cpp"
	"src/gamedata.cpp"
	"src/gamefactory.cpp"
	"src/hook/client.cpp"
	"src/hook/cvar.cpp"
	"src/hook/engine.cpp"
	"src/hook/entity.cpp"
	"src/hook/event.cpp"
	"src/hook/extern/DamageManager.cpp"
	"src/hook/extern/DualMountAddon.cpp"
	"src/hook/extern/GiveNamedItem.cpp"
	"src/hook/extern/HandleCommandJoinTeam.cpp"
	"src/hook/extern/MovementManager.cpp"
	"src/hook/extern/TransmitManager.cpp"
	"src/hook/extern/ValveConsoleLog.cpp"
	"src/hook/gamerule.cpp"
	"src/hook/network.cpp"
	"src/hook/player.cpp"
	"src/hook/server.cpp"
	"src/hook/sound.cpp"
	"src/kv3proxy.cpp"
	"src/kvproxy.cpp"
	"src/loader.cpp"
	"src/logging.cpp"
	"src/manager/ConVarManager.cpp"
	"src/manager/HookManager.cpp"
	"src/memory/memory_access.cpp"
	"src/memory/scan.cpp"
	"src/memoverride_ms.cpp"
	"src/modsharp.cpp"
	"src/module.cpp"
	"src/module_linux.cpp"
	"src/module_windows.cpp"
	"src/netmessage.cpp"
	"src/protobufproxy.cpp"
	"src/sdkproxy.cpp"
	"src/steamproxy.cpp"
	"src/steamworks.cpp"
	"src/strtool.cpp"
	"src/proto/network_connection.pb.cc"
	"src/proto/networkbasetypes.pb.cc"
	"src/proto/usermessages.pb.cc"
	"src/proto/cstrike15_gcmessages.pb.cc"
	"src/proto/cstrike15_usermessages.pb.cc"
	"src/proto/engine_gcmessages.pb.cc"
	"src/proto/gcsdk_gcmessages.pb.cc"
	"src/proto/steammessages.pb.cc"
	"src/proto/netmessages.pb.cc"
	"src/proto/cs_usercmd.pb.cc"
	"src/proto/usercmd.pb.cc"
	cmake.toml
)

add_library(modsharp SHARED)

target_sources(modsharp PRIVATE ${modsharp_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${modsharp_SOURCES})

if(WIN32) # windows
	target_compile_definitions(modsharp PUBLIC
		_WINDOWS
		WIN32
		PLATFORM_WINDOWS
		_WIN32
		WINDOWS
		COMPILER_MSVC64
		COMPILER_MSVC
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_compile_definitions(modsharp PUBLIC
		PLATFORM_POSIX
		_LINUX
		LINUX
		POSIX
		GNUC
		stricmp=strcasecmp
		_stricmp=strcasecmp
		_strnicmp=strncasecmp
		strnicmp=strncasecmp
		_snprintf=snprintf
		_vsnprintf=vsnprintf
		_alloca=alloca
		strcmpi=strcasecmp
		_GLIBCXX_USE_CXX11_ABI=0
		ZYCORE_STATIC_BUILD
		ZYDIS_STATIC_BUILD
	)
endif()

if(MSVC) # msvc
	target_compile_definitions(modsharp PUBLIC
		CRT_SECURE_NO_DEPRECATE
		_CRT_SECURE_NO_WARNINGS
		_CRT_NONSTDC_NO_DEPRECATE
	)
endif()

target_compile_definitions(modsharp PUBLIC
	MODSHARP_EXPORTS
	_USRDLL
	__STDC_LIMIT_MACROS
	X64BITS
	_CRT_NO_VA_START_VALIDATION
	_ITERATOR_DEBUG_LEVEL=0
)

if(CMAKE_BUILD_TYPE STREQUAL "Release") # release
	target_compile_definitions(modsharp PUBLIC
		NDEBUG
	)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug") # debug
	target_compile_definitions(modsharp PUBLIC
		_DEBUG
		DEBUG
	)
endif()

target_compile_features(modsharp PUBLIC
	cxx_std_20
)

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_compile_options(modsharp PUBLIC
		-Wall
		-Wno-uninitialized
		-Wno-switch
		-Wno-unused
		-Wno-non-virtual-dtor
		-Wno-overloaded-virtual
		-Wno-conversion-null
		-Wno-write-strings
		-Wno-invalid-offsetof
		-Wno-reorder
		-Wno-attributes
		-Wno-delete-non-virtual-dtor
		-Wno-format-security
		-Wno-parentheses
		-Wno-sign-compare
		-Wno-unknown-pragmas
		-msse4.1
		-fno-strict-aliasing
		-fno-threadsafe-statics
		-fvisibility=default
	)
endif()

if(MSVC) # msvc
	target_compile_options(modsharp PUBLIC
		"/utf-8"
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(modsharp PUBLIC
		-Wno-nonnull-compare
	)
endif()

target_include_directories(modsharp PUBLIC
	"vendors/zydis/"
	"vendors/safetyhook/include"
	"vendors/expected/include"
	"vendors/steamworks/include"
	"vendors/protobuf/src"
	"vendors/json/"
	src
)

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_link_directories(modsharp PUBLIC
		lib
		protobuf-lib
	)
endif()

if(WIN32) # windows
	target_link_libraries(modsharp PUBLIC
		psapi
		tier0
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_link_libraries(modsharp PUBLIC
		libtier0.so
		protobuf
		libsteam_api.so
	)
endif()

target_link_libraries(modsharp PRIVATE
	protobuf
)

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_link_options(modsharp PUBLIC
		-fuse-ld=mold
		-static-libgcc
		-Wl,-Bstatic
		-lstdc++
		-Wl,-Bdynamic
	)
endif()

if(MSVC) # msvc
	target_link_options(modsharp PUBLIC
		"/NODEFAULTLIB:libcmt"
	)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release") # release
	set_target_properties(modsharp PROPERTIES
		MSVC_RUNTIME_LIBRARY
			"MultiThreaded$<$<CONFIG:Debug>:Debug>"
	)
endif()
