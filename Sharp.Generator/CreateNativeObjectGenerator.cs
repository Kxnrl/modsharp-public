/* 
 * ModSharp
 * Copyright (C) 2023-2025 Kxnrl. All Rights Reserved.
 *
 * This file is part of ModSharp.
 * ModSharp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * ModSharp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ModSharp. If not, see <https://www.gnu.org/licenses/>.
 */

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Sharp.Generator.Sdk.Utils;

namespace Sharp.Generator;

[Generator]
public class CreateNativeObjectGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider((x, _) => x is ClassDeclarationSyntax,
                                                                   (x, _) => (ClassDeclarationSyntax) x.Node);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, (spc, source) => Execute(spc, source.Left, source.Right));
    }

    private void Execute(SourceProductionContext context,
        Compilation                              compilation,
        ImmutableArray<ClassDeclarationSyntax>   syntaxList)
    {
        var nativeObjectList = new List<(INamedTypeSymbol Interface, INamedTypeSymbol Impl)>();

        foreach (var classDeclarationSyntax in syntaxList)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);

            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol namedTypeSymbol)
            {
                continue;
            }

            if (namedTypeSymbol.Name == "NativeObject")
            {
                continue;
            }

            if (namedTypeSymbol.AllInterfaces.All(x => x.Name != "INativeObject"))
            {
                continue;
            }

            if (namedTypeSymbol.Interfaces.FirstOrDefault() is { } @interface)
            {
                nativeObjectList.Add((@interface, namedTypeSymbol));
            }
        }

        var builder = new CodeWriter();

        var namespaceName = "Sharp.Core";
        var className     = "SharpCore";

        builder.AppendLine($"""
                            // <auto-generated/>

                            #pragma warning disable 0649
                            #nullable enable

                            namespace {namespaceName};

                            """);

        using (builder.BeginScope($"partial class {className}"))
        {
            using (builder.BeginScope(
                       $"public partial T? CreateNativeObject<T>(nint ptr) where T : class, Sharp.Shared.CStrike.INativeObject"))
            {
                builder.AppendLine("var type = typeof(T);\n");

                foreach (var item in nativeObjectList)
                {
                    // ignore generic impl
                    if (item.Impl.ToString().Contains("<"))
                    {
                        continue;
                    }

                    // skip self
                    if (item.Impl.ToString().EndsWith(".NativeObject"))
                    {
                        continue;
                    }

                    using (builder.BeginScope($"if (type == typeof({item.Interface}))"))
                    {
                        builder.AppendLine($"return {item.Impl}.Create(ptr) as T;");
                    }
                }

                builder.AppendLine("""throw new System.NotSupportedException("Unsupported Object Type");""");
            }
        }

        context.AddSource("CreateNativeObjects.g.cs", builder.ToString());
    }
}
