/* 
 * ModSharp
 * Copyright (C) 2023-2025 Kxnrl. All Rights Reserved.
 *
 * This file is part of ModSharp.
 * ModSharp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * ModSharp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ModSharp. If not, see <https://www.gnu.org/licenses/>.
 */

using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Sharp.Generator.Sdk.Utils;

namespace Sharp.Generator;

[Generator]
public class GameEventGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.ForAttributeWithMetadataName("Sharp.Core.GameEvents.GameEventNameAttribute",
                                                                           static (x, _) => x is ClassDeclarationSyntax,
                                                                           (gasc, _) => (ClassDeclarationSyntax) gasc
                                                                               .TargetNode);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation,
                                     (spc, source) => Execute(spc, source.Left, source.Right));
    }

    private void Execute(SourceProductionContext context,
        Compilation                              compilation,
        ImmutableArray<ClassDeclarationSyntax>   syntaxList)
    {
        var builder = new CodeWriter();

        builder.AppendLine("""
                           // <auto-generated/>

                           #nullable enable

                           using System;
                           using System.Buffers;
                           using System.Runtime.InteropServices;
                           using System.Text;
                           using System.Text.Unicode;
                           using Sharp.Shared;
                           using Sharp.Shared.CStrike;

                           """);

        foreach (var syntax in syntaxList)
        {
            var semanticModel = compilation.GetSemanticModel(syntax.SyntaxTree);

            if (semanticModel.GetDeclaredSymbol(syntax) is not INamedTypeSymbol namedTypeSymbol)
            {
                continue;
            }

            var namespaceName = namedTypeSymbol.ContainingNamespace.ToDisplayString();
            var className     = namedTypeSymbol.Name;

            using (builder.BeginScope($"namespace {namespaceName}"))
            {
                using (builder.BeginScope($"partial class {className}"))
                {
                    // ctor
                    var eventAttribute = namedTypeSymbol.GetAttributes()
                                                        .FirstOrDefault(x => x.AttributeClass?.ToDisplayString()
                                                                             == "Sharp.Core.GameEvents.GameEventNameAttribute");

                    if (eventAttribute is null)
                    {
                        continue;
                    }

                    var eventName = eventAttribute.ConstructorArguments.FirstOrDefault().Value as string;

                    using (builder.BeginScope(
                               $"""public {className}(nint ptr, bool editable) : base(ptr, "{eventName}", editable)"""))
                    {
                    }

                    foreach (var member in namedTypeSymbol.GetMembers())
                    {
                        if (member is not IFieldSymbol fieldSymbol)
                        {
                            continue;
                        }

                        var attribute = fieldSymbol.GetAttributes()
                                                   .FirstOrDefault(x => x.AttributeClass?.ToDisplayString()
                                                                        == "Sharp.Core.GameEvents.GameEventPropertyAttribute");

                        if (attribute is null)
                        {
                            continue;
                        }

                        var keyName  = attribute.ConstructorArguments.FirstOrDefault().Value as string;
                        var nullable = attribute.ConstructorArguments[1].Value as bool? ?? false;

                        var fieldName    = fieldSymbol.Name;
                        var propertyName = fieldName[1].ToString().ToUpper() + fieldName.Substring(2);
                        var propertyType = fieldSymbol.Type.ToDisplayString();

                        if (!nullable)
                        {
                            propertyType = propertyType.Replace("?", "");
                        }

                        using (builder.BeginScope($"public {propertyType} {propertyName}"))
                        {
                            using (builder.BeginScope("get"))
                            {
                                var suffix = nullable ? "" : "!";

                                if (propertyType.StartsWith("Sharp.Shared.GameEntities.IPlayerController"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetPlayerController("{keyName}");""");
                                }
                                else if (propertyType.StartsWith("Sharp.Shared.GameEntities.IPlayerPawn"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetPlayerPawn("{keyName}");""");
                                }
                                else if (propertyType.StartsWith("bool"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= (GetInt("{keyName}")==1);""");
                                    suffix += ".Value";
                                }
                                else if (propertyType.StartsWith("short"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= unchecked((short)GetInt("{keyName}"));""");
                                    suffix += ".Value";
                                }
                                else if (propertyType.StartsWith("ushort"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= unchecked((ushort)GetInt("{keyName}"));""");
                                    suffix += ".Value";
                                }
                                else if (propertyType.StartsWith("int"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetInt("{keyName}");""");
                                    suffix += ".Value";
                                }
                                else if (propertyType.StartsWith("string"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetString("{keyName}");""");

                                    // string is not needed
                                }
                                else if (propertyType.StartsWith("float"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetFloat("{keyName}");""");
                                    suffix += ".Value";
                                }
                                else if (propertyType.StartsWith("ulong"))
                                {
                                    builder.AppendLine($"""{fieldName} ??= GetUInt64("{keyName}");""");
                                    suffix += ".Value";
                                }
                                else
                                {
                                    builder.AppendLine($"""{fieldName} ??= unchecked(({propertyType})GetInt("{keyName}"));""");
                                    suffix += ".Value";
                                }

                                builder.AppendLine($"return {fieldName}{suffix};");
                            }

                            using (builder.BeginScope("set"))
                            {
                                var nullCheck = nullable
                                    ? """ ?? throw new InvalidOperationException("Can't set null value")"""
                                    : "";

                                if (propertyType.StartsWith("Sharp.Shared.GameEntities.IPlayerController"))
                                {
                                    builder.AppendLine($"""SetPlayer("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("Sharp.Shared.GameEntities.IPlayerPawn"))
                                {
                                    builder.AppendLine($"""SetPlayer("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("bool"))
                                {
                                    builder.AppendLine($"""SetInt("{keyName}", (value{nullCheck}) ? 1 : 0);""");
                                }
                                else if (propertyType.StartsWith("short"))
                                {
                                    builder.AppendLine($"""SetInt("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("ushort"))
                                {
                                    builder.AppendLine($"""SetInt("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("int"))
                                {
                                    builder.AppendLine($"""SetInt("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("string"))
                                {
                                    builder.AppendLine($"""SetString("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("float"))
                                {
                                    builder.AppendLine($"""SetFloat("{keyName}", value{nullCheck});""");
                                }
                                else if (propertyType.StartsWith("ulong"))
                                {
                                    builder.AppendLine($"""SetUInt64("{keyName}", value{nullCheck});""");
                                }
                                else
                                {
                                    builder.AppendLine($"""SetInt("{keyName}", (int)(value{nullCheck}));""");
                                }

                                builder.AppendLine($"{fieldName} = value;");
                            }
                        }
                    }
                }
            }
        }

        context.AddSource("GameEvents.g.cs", builder.ToString());
    }
}
